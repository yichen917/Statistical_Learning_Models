{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "P66ItHpNe-_O"
      },
      "source": [
        "## **DL MLP Model and Regularization**"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Multilayer Perceptrons for Regression**\n",
        "\n",
        "Multilayer perceptrons (MLP) are powerful methods to construct regression models. We are going to explore MLP training in this homework.\n",
        "\n",
        "**Dataset: Million Songs Dataset**\n",
        "\n",
        "We are going to use the \"Million Songs Dataset\" in this question. The dataset has been pre-processed; the training and testing dataset has been split and stored in a dictionary data structure. You can load the data from msd_full.pickle using pickle.load(). There are four elements in the dictionary: x_train, y_train, x_test, y_test. As indicated by their names, these four elements are training and testing data. The outcome variable (i.e.,  y\n",
        " ) is the year a song was released, and the features are variables that characterize the sound of a song. The goal is to predict the release year given sound features.\n",
        "\n",
        "**Prediction Performance**\n",
        "\n",
        "We are going to use Root Mean Squared Error (RMSE) to measure the prediction accuracy.\n",
        "\n",
        "**Subtraining, Validation, and Test Datasets**\n",
        "\n",
        "The msd_full.pickle contains a randomly permutated training dataset. You should reserve the last 10% of the training dataset as the validation set, and the remaining 90% as the subtraining set. Use the subtraining set to train a model and tune hyperparameters using the validation set. Use the test set to compute test RMSE.\n",
        "\n",
        "Standardize all numerical features in the training set before splitting into subtraining and validation. Apply the mean and standard deviation of features in the training set to standardize numerical features in the test set.\n",
        "\n",
        "**Model Settings**\n",
        "\n",
        "We consider the following model settings:\n",
        "\n",
        "|Case |\ty |\t# of obs. in subtraining| Model     |\tRegularization|\n",
        "|:----:|:---:|:----------------------------:|-----------------:|--------------:|\n",
        "|OLS |keep |10,000\t     |Linear Regression|\tNone|\n",
        "|MLP_0_dm|de-mean|10,000\t   |MLP, no hidden layers\t|None|\n",
        "|MLP_1_dm|de-mean|10,000\t   |MLP, one hidden layer + ReLU|None|\n",
        "|MLP_2_dm|de-mean|10,000\t   |MLP, two hidden layers + ReLu|None|\n",
        "|MLP_2_dm_L2|de-mean|10,000   |MLP, two hidden layers + ReLu|Weight Decay (L2)|\n",
        "|MLP_2_dm_dropout|de-mean|10,000 |MLP, two hidden layers + ReLu|Dropout|\n",
        "|MLP_2_ykeep|keep|10,000     |MLP, two hidden layers + ReLu|None|\n",
        "|MLP_2_ykeep_L2|keep|10,000\t  |MLP, two hidden layers + ReLu|Weight Decay (L2)|\n",
        "|MLP_2_ykeep_dropout|keep|10,000 |MLP, two hidden layers + ReLu|Dropout|\n",
        "|MLP_2_dm_dropout_full|de-mean|All|MLP, two hidden layers + ReLu|Dropout|\n",
        "\n",
        "Build a prediction model for each case using the setting given in the table above. You are responsible for hyperparameter tuning so that the results are reasonably good. Use stochastic gradient descent (SGD) for all MLP models. Additional explanations regarding the model settings are listed below.\n",
        "\n",
        "**y**: The term \"keep\" means using the original target values in the dataset. The term \"de-mean\" means that you should subtract all target values in training and test set by the mean of the target values in the training set. Note that in \"de-mean\" setting, you should compute RMSE using the de-meaned target values in the test set so that the results are consistent.\n",
        "\n",
        "**# of obs. in subtraining**: The term \"10,000\" means that you should use the first 10,000 data points in the subtraining dataset for model training. The term \"All\" means that you should use all data points in subtraining dataset for model training.\n",
        "\n",
        "**Model**: \"MLP with no hidden layers\" is a setting that mimics linear regression using MLP. \"MLP, one hidden layer + ReLU\" is a model with one hidden layer with ReLU activation functions. The size of the hidden layer is 45. \"MLP, two hidden layers + ReLu\" is a model with two hidden layers, each layer with ReLU activation functions. Each hidden layer has 45 neurons.\n",
        "\n",
        "**Regularization**: \"Weight Decay\" corresponds to using L2 regularization for all parameters except the bias terms. You need to tune this hyperparameter for good generalized performance. \"Dropout\" corresponds to an additional dropout layer after a hidden layer. Use dropout probability = 0.5 for all layers.\n",
        "\n",
        "**Early Stopping**\n",
        "Let  $n$ denote the number of data points in the training set. A training epoch is completed when SGD went through all $n$ data points once. The maximum training epochs for settings with 10,000 data points in the subtraining is 3,000 epochs. The maximum epochs for a full subtraining set are 50. For all cases except the last case (MLP_2_dm_dropout_full), you are allowed to stop the training process if the validation RMSE remains the lowest in the next 50 epochs. Do not adopt early stopping for the last case.\n",
        "\n",
        "**Implementation Restriction**\n",
        "You should use MXNET for MLP learning. Case OLS should use a \"standard\" OLS learner.\n",
        "\n",
        "**Questions**\n",
        "\n",
        "Q1:\n",
        "Train and tune the models listed above. Report test RMSE for each model setting.\n",
        "\n",
        "Q2:\n",
        "Summarize test RMSE in one table. Discuss your findings."
      ],
      "metadata": {
        "id": "vUFW_9OmfJPo"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gRfZnwR8e-_a"
      },
      "source": [
        "### Read Data"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "hIZBjFOKe-_c"
      },
      "outputs": [],
      "source": [
        "import numpy\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import pickle\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import LinearRegression"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "WAMA0oSze-_h"
      },
      "outputs": [],
      "source": [
        "import d2l\n",
        "import mxnet as mx\n",
        "from mxnet.gluon import nn\n",
        "from mxnet import gluon, init, autograd, np, npx\n",
        "npx.set_np()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "qHmIcMBve-_i"
      },
      "outputs": [],
      "source": [
        "with open(\"msd_full.pickle\", 'rb') as file:\n",
        "    data =pickle.load(file)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "bV9WGfHue-_k",
        "outputId": "b0972fff-5547-4ab3-eb0d-d45171bd68e0"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "(463715, 90) (51630, 90) (463715,) (51630,)\n"
          ]
        }
      ],
      "source": [
        "x_train, x_test, y_train, y_test = data['X_train'], data['X_test'], data['Y_train'], data['Y_test']\n",
        "print(x_train.shape, x_test.shape, y_train.shape, y_test.shape)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9cgDHb3Le-_o"
      },
      "source": [
        "### Standardize all features"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "XKHM1t5ge-_q",
        "outputId": "366aa4c1-0c28-4d94-a574-75594dfbdc25"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "mean of features\n",
            " [ 4.33854878e+01  1.26109102e+00  8.65019512e+00  1.13076327e+00\n",
            " -6.51272453e+00 -9.56552710e+00 -2.38460950e+00 -1.79372153e+00\n",
            "  3.71458446e+00  1.87249454e+00 -1.43124984e-01  2.54142311e+00\n",
            "  3.36688834e+01  2.43589646e+03  1.96510182e+03  1.51205063e+03\n",
            "  9.10432803e+02  8.77598892e+02  6.03197107e+02  5.16171624e+02\n",
            "  3.93807387e+02  3.25034711e+02  2.88237354e+02  2.92140920e+02\n",
            "  4.30846834e+01  4.32472924e+01 -4.63454595e+01 -2.79639129e+01\n",
            "  1.46140187e+01  4.46637702e+01  5.33815379e+00  2.39861677e+01\n",
            "  9.84432620e+00 -4.15316743e+00  6.36737045e-01  7.27213158e+01\n",
            " -5.17048243e+01  1.17332411e+02 -1.89741066e+02  2.32635453e+01\n",
            " -1.19240277e+00  1.84593563e+01 -5.18602549e+01  3.17096696e+00\n",
            " -1.51814254e+00  6.36787852e+00  7.85528815e+01  1.43006647e+02\n",
            " -8.62206018e+01  2.53047310e+01  6.25004805e+00  2.83298998e+01\n",
            "  1.26734419e+01  1.74636568e+00 -1.01378234e+01  6.40029203e+01\n",
            "  1.04409785e+02 -2.29792748e-01  3.89656732e+01 -2.81401879e+01\n",
            "  3.18316458e+00  3.62520904e-01 -4.96423922e-01 -1.38093410e+02\n",
            " -4.21127137e-01  4.06764919e-01  3.09305865e+00  2.79343703e+01\n",
            "  3.19023835e+01 -8.16369762e-01 -8.79290486e+00  5.31661254e+00\n",
            " -2.72512195e+01 -1.18774552e+01 -2.15992792e+01 -5.53383665e+00\n",
            " -2.33480308e+01  3.14751440e+01 -1.04940075e+02  2.69950153e+01\n",
            "  1.57433609e+01 -7.30677530e+01  4.14239757e+01  3.77808678e+01\n",
            "  3.45259293e-01  1.75992801e+01 -2.63648256e+01  4.44498480e+00\n",
            "  1.97393066e+01  1.32332570e+00]\n"
          ]
        }
      ],
      "source": [
        "feature_scalar = StandardScaler()\n",
        "x_train_std = feature_scalar.fit_transform(x_train)\n",
        "print(\"mean of features\\n\", feature_scalar.mean_)\n",
        "x_test_std = feature_scalar.transform(x_test)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "SXbnCn5Xe-_s"
      },
      "outputs": [],
      "source": [
        "# transfer from numpy ndarray into mxnet.numpy.ndarray\n",
        "x_train_std = np.array(x_train_std,dtype=np.float32)\n",
        "y_train = np.array(y_train,dtype=np.float32)\n",
        "x_test_std = np.array(x_test_std,dtype=np.float32)\n",
        "y_test = np.array(y_test,dtype=np.float32)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "5NKxhpoWe-_u"
      },
      "outputs": [],
      "source": [
        "# split into sub_training and testing dataset\n",
        "x_sub_train, x_val, y_sub_train, y_val = train_test_split(x_train_std,\n",
        "                                                          y_train,\n",
        "                                                          test_size = 0.1,\n",
        "                                                          shuffle = False)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "-dWeaKG5e-_v",
        "outputId": "8f06d356-1da6-43ce-eb5d-d60eb35a2915"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "mxnet.numpy.ndarray"
            ]
          },
          "execution_count": 55,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "type(x_sub_train)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "P4ZBO406e-_w",
        "outputId": "d5aca06b-8c5d-4773-d429-ba0c275b4e97"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "(417343, 90) (417343,) (46372, 90) (46372,)\n"
          ]
        }
      ],
      "source": [
        "print(x_sub_train.shape, y_sub_train.shape, x_val.shape, y_val.shape)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Edys8oRGe-_y",
        "outputId": "b942d5ed-a0aa-48ca-f917-dac6132c8558"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "(10000, 90) (10000,)\n"
          ]
        }
      ],
      "source": [
        "x_to_train, y_to_train = x_sub_train[:10000], y_sub_train[:10000]\n",
        "print(x_to_train.shape, y_to_train.shape)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "nFZgcv-2e-_0",
        "outputId": "e089dd70-7d89-4004-fb15-ada960bad860"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Original y mean =  1998.3696\n",
            "Mean after de-mean for y_to_train=  7.109375e-05\n",
            "Mean after de-mean for y_val=  -0.0031577598\n"
          ]
        }
      ],
      "source": [
        "y_train_mean = numpy.mean(y_to_train)\n",
        "print(\"Original y mean = \", numpy.mean(y_to_train))\n",
        "y_to_train_dmean = y_to_train - numpy.mean(y_to_train)\n",
        "y_val_dmean = y_val - y_train_mean\n",
        "print(\"Mean after de-mean for y_to_train= \", numpy.mean(y_to_train_dmean))\n",
        "print(\"Mean after de-mean for y_val= \", numpy.mean(y_val_dmean))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LtQnAL_De-_1"
      },
      "source": [
        "### Some functions"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Cp9BJjAve-_2"
      },
      "outputs": [],
      "source": [
        "def RMSE(y_true, y_pre):\n",
        "    n = len(y_true)\n",
        "    MSE = np.sum(((y_true - y_pre) ** 2)) / n\n",
        "    return np.sqrt(MSE)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "4OdqLuIRe-_2"
      },
      "outputs": [],
      "source": [
        "def RMSE_numpy(y_true, y_pre):\n",
        "    n = len(y_true)\n",
        "    MSE = numpy.sum(((y_true - y_pre) ** 2)) / n\n",
        "    return numpy.sqrt(MSE)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "iN0Fes9Oe-_3"
      },
      "outputs": [],
      "source": [
        "def load_array(data_arrays, batch_size, is_train = True):\n",
        "    dataset = gluon.data.ArrayDataset(*data_arrays)\n",
        "    return gluon.data.DataLoader(dataset, batch_size, shuffle = is_train)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WEEuhN7xe-_4"
      },
      "source": [
        "### Model Building"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "wjYVt75Oe-_5"
      },
      "outputs": [],
      "source": [
        "RMSE_arr = numpy.zeros(10)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3HJMKkbse-_5"
      },
      "source": [
        "#### Case1: OLS\n",
        "- keep y\n",
        "- #of obs. = 10000\n",
        "- linear regression\n",
        "- no regulization"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ZnmX1Ug7e-_6",
        "outputId": "b311796f-452d-44a6-cbd5-589ceb2f5323"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "RMSE of case 1 - OLS is  9.550725\n"
          ]
        }
      ],
      "source": [
        "OLS = LinearRegression()\n",
        "OLS.fit(x_to_train.asnumpy(), y_to_train.asnumpy())\n",
        "y_pre_1 = OLS.predict(x_test_std.asnumpy())\n",
        "RMSE_1 = RMSE(y_test, np.array(y_pre_1))\n",
        "print(\"RMSE of case 1 - OLS is \", RMSE_1)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YZ7n-ojYe-_6"
      },
      "source": [
        "\n",
        "Next, when building the DL models, the general steps for each case are as follows:\n",
        "\n",
        "1. Create the build_model_x() function to establish the neural network architecture\n",
        "2. Develop the train_model_x() function, input the loss function, autograd, trainer, etc. to the function and train the model.\n",
        "3. Visualization: Plot the training RMSE and validation RMSE to observe trends.\n",
        "4. Prediction: Use testing data to predict y and calculate the RMSE.\n",
        "\n",
        "Additionally, regarding the early stopping condition mentioned in the question, it is specified that if the validation RMSE remains stable at a low point for the last 50 epochs, early stopping can be triggered. However, during the implementation of the first several models, it was observed that the convergence was fast, and before reaching 50 epochs, the validation RMSE started increasing, indicating potential overfitting. Therefore, adjustments were made to this condition, allowing it to be a parameter. \"compare_start\" represents the epoch at which to start considering early stopping, \"compare\" indicates the comparison with previous RMSE values, and \"tol\" is the range for determining stability at a low point."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IdO7-pG7e-_7"
      },
      "source": [
        "#### Case 2: MLP_0_dm\n",
        "- de-mean y\n",
        "- #of obs. = 10000\n",
        "- no hidden layers\n",
        "- no regulization"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "5xjKzVN0e-_7"
      },
      "outputs": [],
      "source": [
        "num_hidden = 45\n",
        "BATCH_SIZE = 100\n",
        "model_cpu = mx.cpu()\n",
        "lr = 0.001"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "HBc1Pw0Be-_8"
      },
      "outputs": [],
      "source": [
        "def build_model_2():\n",
        "    net = nn.Sequential()\n",
        "    net.add(nn.Dense(1))\n",
        "    print(net)  # display the model\n",
        "    net.initialize(init.Normal(sigma=0.01))\n",
        "    return net"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "I9pmfIfxe-_9"
      },
      "outputs": [],
      "source": [
        "def train_model(net, train_x, train_y, val_x, val_y, batch_size, train_num, lr = 0.005, epochs=3000, compare_start = 50, compare = 50, tol = 0.001):\n",
        "    l2_loss = gluon.loss.L2Loss()\n",
        "    trainer = gluon.Trainer(net.collect_params(), 'sgd', {'learning_rate' : lr})\n",
        "    train_iter = load_array((train_x, train_y), batch_size = batch_size)\n",
        "\n",
        "    train_RMSEs = []\n",
        "    val_RMSEs = []\n",
        "\n",
        "    for epoch in range(epochs):\n",
        "        cum_loss = 0\n",
        "        i_list = []\n",
        "        for i, (data, label) in enumerate(train_iter):\n",
        "            data = data.as_in_context(model_cpu)\n",
        "            label = label.as_in_context(model_cpu)\n",
        "            with autograd.record():\n",
        "                output = net(data)\n",
        "                loss = l2_loss(output, label)\n",
        "            loss.backward()\n",
        "            trainer.step(batch_size)\n",
        "            cum_loss += np.mean(loss)\n",
        "\n",
        "        pre_y = net(val_x).reshape(-1,)\n",
        "        val_RMSE = RMSE(val_y, pre_y)\n",
        "        val_RMSEs.append(val_RMSE)\n",
        "        train_RMSE = numpy.sqrt(cum_loss/train_num)\n",
        "        train_RMSEs.append(train_RMSE)\n",
        "        print(\"Epoch %s, RMSE: %s, validation RMSE: %s\" % (epoch+1, train_RMSE, val_RMSE))\n",
        "\n",
        "        if epoch > compare_start and abs(float(val_RMSEs[-compare]) - float(val_RMSEs[-1])) < tol:\n",
        "            break\n",
        "    return train_RMSEs, val_RMSEs"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "YvpwKRR7e-_9",
        "outputId": "3184848e-667e-4923-df64-68737837eadc"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Sequential(\n",
            "  (0): Dense(-1 -> 1, linear)\n",
            ")\n",
            "Epoch 1, RMSE: 0.74215907, validation RMSE: 10.181122\n",
            "Epoch 2, RMSE: 0.7149956, validation RMSE: 9.958531\n",
            "Epoch 3, RMSE: 0.703784, validation RMSE: 9.843585\n",
            "Epoch 4, RMSE: 0.6969085, validation RMSE: 9.774793\n",
            "Epoch 5, RMSE: 0.69224435, validation RMSE: 9.729916\n",
            "Epoch 6, RMSE: 0.6892511, validation RMSE: 9.693354\n",
            "Epoch 7, RMSE: 0.68689984, validation RMSE: 9.669732\n",
            "Epoch 8, RMSE: 0.6851608, validation RMSE: 9.647479\n",
            "Epoch 9, RMSE: 0.68378735, validation RMSE: 9.63621\n",
            "Epoch 10, RMSE: 0.68271327, validation RMSE: 9.619543\n",
            "Epoch 11, RMSE: 0.6818381, validation RMSE: 9.6293955\n",
            "Epoch 12, RMSE: 0.68145543, validation RMSE: 9.601776\n",
            "Epoch 13, RMSE: 0.68093985, validation RMSE: 9.603327\n",
            "Epoch 14, RMSE: 0.6805185, validation RMSE: 9.598107\n",
            "Epoch 15, RMSE: 0.6798904, validation RMSE: 9.589235\n",
            "Epoch 16, RMSE: 0.67983544, validation RMSE: 9.592474\n",
            "Epoch 17, RMSE: 0.6797159, validation RMSE: 9.592108\n",
            "Epoch 18, RMSE: 0.6793592, validation RMSE: 9.583906\n",
            "Epoch 19, RMSE: 0.67947024, validation RMSE: 9.583066\n"
          ]
        }
      ],
      "source": [
        "net_2 = build_model_2()\n",
        "train_RMSE_2, val_RMSE_2 = train_model(net_2,\n",
        "                                       train_x = x_to_train,\n",
        "                                       train_y = y_to_train_dmean,\n",
        "                                       val_x = x_val,\n",
        "                                       val_y = y_val_dmean,\n",
        "                                       batch_size = BATCH_SIZE,\n",
        "                                       train_num = 10000)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "kSGxX9Xhe-_-"
      },
      "outputs": [],
      "source": [
        "def plot_RMSE(RMSEs, cate):\n",
        "    plt.plot(RMSEs)\n",
        "    plt.grid(True, which=\"both\")\n",
        "    plt.xlabel('epoch',fontsize=14)\n",
        "    if cate == \"train\":\n",
        "        plt.ylabel('train RMSE',fontsize=14)\n",
        "    elif cate == 'val':\n",
        "        plt.ylabel('validation RMSE',fontsize=14)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Xrvc3z54e-_-",
        "outputId": "eaaa3edf-0e22-49a3-baaf-ff1a6a4d5180"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "plot_RMSE(train_RMSE_2, \"train\")\n",
        "plot_RMSE(val_RMSE_2, \"val\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "TyCKSKAWe-__",
        "outputId": "dd155b2d-57a4-446a-f4cd-bf0a14e05f3d"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([1992.5304, 1998.3269, 2003.9829, ..., 1994.4869, 1996.9213,\n",
              "       1998.3975])"
            ]
          },
          "execution_count": 204,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "pre_2 = (net_2(x_test_std) + y_train_mean).reshape(-1,)\n",
        "pre_2"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "3psud21se_AA",
        "outputId": "d43e3869-f164-426a-8b20-6b7e9ed1b1b1"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "RMSE =  9.551039\n"
          ]
        }
      ],
      "source": [
        "RMSE_2 = RMSE(pre_2, y_test)\n",
        "print(\"RMSE = \", RMSE_2)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "z5qKkHije_AB"
      },
      "source": [
        "#### Case 3: MLP_1_dm\n",
        "- de-mean y\n",
        "- #of obs.: 10,000\n",
        "- one hidden layer + ReLU\n",
        "- no regulization"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "MKCVAi-Re_AC"
      },
      "outputs": [],
      "source": [
        "def build_model_3():\n",
        "    net = nn.Sequential()\n",
        "    net.add(nn.Dense(num_hidden, activation = 'relu'),\n",
        "            nn.Dense(1))\n",
        "    print(net)  # display the model\n",
        "    net.initialize(init.Normal(sigma=0.01))\n",
        "    return net"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "yt1_Af6De_AE",
        "outputId": "ec990217-c792-4ba0-b834-21e56c4dcf2b"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Sequential(\n",
            "  (0): Dense(-1 -> 45, Activation(relu))\n",
            "  (1): Dense(-1 -> 1, linear)\n",
            ")\n",
            "Epoch 1, RMSE: 0.77328044, validation RMSE: 10.914109\n",
            "Epoch 2, RMSE: 0.77191347, validation RMSE: 10.868774\n",
            "Epoch 3, RMSE: 0.7640423, validation RMSE: 10.648968\n",
            "Epoch 4, RMSE: 0.7404202, validation RMSE: 10.18471\n",
            "Epoch 5, RMSE: 0.7056819, validation RMSE: 9.700835\n",
            "Epoch 6, RMSE: 0.67962354, validation RMSE: 9.468028\n",
            "Epoch 7, RMSE: 0.6654975, validation RMSE: 9.348364\n",
            "Epoch 8, RMSE: 0.65889436, validation RMSE: 9.288055\n",
            "Epoch 9, RMSE: 0.6544368, validation RMSE: 9.256201\n",
            "Epoch 10, RMSE: 0.6514535, validation RMSE: 9.2420225\n",
            "Epoch 11, RMSE: 0.6492095, validation RMSE: 9.220089\n",
            "Epoch 12, RMSE: 0.6467686, validation RMSE: 9.215918\n",
            "Epoch 13, RMSE: 0.6450144, validation RMSE: 9.198323\n",
            "Epoch 14, RMSE: 0.64301765, validation RMSE: 9.221876\n",
            "Epoch 15, RMSE: 0.64138454, validation RMSE: 9.204364\n",
            "Epoch 16, RMSE: 0.6401272, validation RMSE: 9.211575\n",
            "Epoch 17, RMSE: 0.63781214, validation RMSE: 9.202781\n",
            "Epoch 18, RMSE: 0.6364285, validation RMSE: 9.223763\n",
            "Epoch 19, RMSE: 0.63495064, validation RMSE: 9.21272\n",
            "Epoch 20, RMSE: 0.63356733, validation RMSE: 9.190048\n",
            "Epoch 21, RMSE: 0.63208824, validation RMSE: 9.200989\n",
            "Epoch 22, RMSE: 0.63002396, validation RMSE: 9.1865\n",
            "Epoch 23, RMSE: 0.6285432, validation RMSE: 9.179813\n",
            "Epoch 24, RMSE: 0.62735593, validation RMSE: 9.185529\n"
          ]
        }
      ],
      "source": [
        "net_3 = build_model_3()\n",
        "train_RMSE_3, val_RMSE_3 = train_model(net_3,\n",
        "                                       train_x = x_to_train,\n",
        "                                       train_y = y_to_train_dmean,\n",
        "                                       val_x = x_val,\n",
        "                                       val_y = y_val_dmean,\n",
        "                                       batch_size = BATCH_SIZE,\n",
        "                                       lr = 0.003,\n",
        "                                       train_num = 10000,\n",
        "                                       compare = 3)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "mLQra7I7e_AG",
        "outputId": "dce65e5a-5db8-411c-b9e3-a31e1e9b7d97"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "plot_RMSE(train_RMSE_2, \"train\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "p3VKIbMfe_AH",
        "outputId": "757acb57-f9b1-428b-aa35-019d5eebdccf"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "plot_RMSE(val_RMSE_2, \"val\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "GKletuxVe_AI",
        "outputId": "9a933714-e3dd-4736-897b-dcfcb0f06dea"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([1993.4753, 1995.6637, 2000.2539, ..., 1997.4315, 1996.9276,\n",
              "       2001.6577])"
            ]
          },
          "execution_count": 277,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "pre_3 = (net_3(x_test_std) + y_train_mean).reshape(-1,)\n",
        "pre_3"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "S7B4najSe_AJ",
        "outputId": "cb8caaa1-32de-4ba1-f30f-44815360a6d4"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "RMSE =  9.222363\n"
          ]
        }
      ],
      "source": [
        "RMSE_3 = RMSE(pre_3, y_test)\n",
        "print(\"RMSE = \", RMSE_3)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jxA6jvmQe_AX"
      },
      "source": [
        "#### Case 4: MLP_2_dm\n",
        "- de-mean y\n",
        "- #of obs.: 10,000\n",
        "- two hidden layers + ReLU\n",
        "- no regulization"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "dvT0oGT8e_AY"
      },
      "outputs": [],
      "source": [
        "def build_model_4():\n",
        "    net = nn.Sequential()\n",
        "    net.add(nn.Dense(num_hidden, activation = 'relu'),\n",
        "            nn.Dense(num_hidden, activation = 'relu'),\n",
        "            nn.Dense(1))\n",
        "    print(net)  # display the model\n",
        "    net.initialize(init.Normal(sigma=0.01))\n",
        "    return net"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "IhYas9n_e_AZ",
        "outputId": "7760674e-0e08-4fd1-ba5e-c4881c5355a2"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Sequential(\n",
            "  (0): Dense(-1 -> 45, Activation(relu))\n",
            "  (1): Dense(-1 -> 45, Activation(relu))\n",
            "  (2): Dense(-1 -> 1, linear)\n",
            ")\n",
            "Epoch 1, RMSE: 0.77347076, validation RMSE: 10.921426\n",
            "Epoch 2, RMSE: 0.7734723, validation RMSE: 10.921408\n",
            "Epoch 3, RMSE: 0.7734711, validation RMSE: 10.921387\n",
            "Epoch 4, RMSE: 0.773467, validation RMSE: 10.921363\n",
            "Epoch 5, RMSE: 0.77347064, validation RMSE: 10.921332\n",
            "Epoch 6, RMSE: 0.7734664, validation RMSE: 10.921291\n",
            "Epoch 7, RMSE: 0.7734606, validation RMSE: 10.921236\n",
            "Epoch 8, RMSE: 0.7734574, validation RMSE: 10.921162\n",
            "Epoch 9, RMSE: 0.77345014, validation RMSE: 10.921048\n",
            "Epoch 10, RMSE: 0.7734437, validation RMSE: 10.920876\n",
            "Epoch 11, RMSE: 0.7734279, validation RMSE: 10.920601\n",
            "Epoch 12, RMSE: 0.77340734, validation RMSE: 10.920135\n",
            "Epoch 13, RMSE: 0.7733576, validation RMSE: 10.919277\n",
            "Epoch 14, RMSE: 0.77327365, validation RMSE: 10.917526\n",
            "Epoch 15, RMSE: 0.77309155, validation RMSE: 10.913416\n",
            "Epoch 16, RMSE: 0.7726044, validation RMSE: 10.90155\n",
            "Epoch 17, RMSE: 0.7709171, validation RMSE: 10.853774\n",
            "Epoch 18, RMSE: 0.7618903, validation RMSE: 10.54883\n",
            "Epoch 19, RMSE: 0.71596813, validation RMSE: 9.595245\n",
            "Epoch 20, RMSE: 0.66922677, validation RMSE: 9.324105\n",
            "Epoch 21, RMSE: 0.6580976, validation RMSE: 9.233034\n",
            "Epoch 22, RMSE: 0.65072674, validation RMSE: 9.218713\n",
            "Epoch 23, RMSE: 0.64594823, validation RMSE: 9.176849\n",
            "Epoch 24, RMSE: 0.64130396, validation RMSE: 9.156077\n",
            "Epoch 25, RMSE: 0.6370329, validation RMSE: 9.165077\n"
          ]
        }
      ],
      "source": [
        "net_4 = build_model_4()\n",
        "train_RMSE_4, val_RMSE_4 = train_model(net_4,\n",
        "                                       train_x = x_to_train,\n",
        "                                       train_y = y_to_train_dmean,\n",
        "                                       val_x = x_val,\n",
        "                                       val_y = y_val_dmean,\n",
        "                                       batch_size = BATCH_SIZE,\n",
        "                                       lr = 0.003,\n",
        "                                       tol = 0.015,\n",
        "                                       train_num = 10000,\n",
        "                                       compare_start = 22,\n",
        "                                       compare = 2)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "EE0GwRRGe_Aa",
        "outputId": "5ad25efc-932b-4a6f-a676-fd8b59777fee"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "plot_RMSE(train_RMSE_4, \"train\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "qxbn_Gdme_Ab",
        "outputId": "d3dd8ad2-feb2-485a-90ca-269b9b1c3b6d"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "plot_RMSE(val_RMSE_4, \"val\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "W_CdKlA2e_Ae",
        "outputId": "db4c1a8b-c6c3-453d-bf6e-e623c4c7499c"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([1992.505 , 1994.9745, 2002.4965, ..., 2003.0282, 1997.103 ,\n",
              "       2001.5067])"
            ]
          },
          "execution_count": 326,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "pre_4 = (net_4(x_test_std) + y_train_mean).reshape(-1,)\n",
        "pre_4"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "0gEul2O4e_Ag",
        "outputId": "18d895ed-95ac-44c6-c5f8-e68447f7c6fc"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "RMSE =  9.205904\n"
          ]
        }
      ],
      "source": [
        "RMSE_4 = RMSE(pre_4, y_test)\n",
        "print(\"RMSE = \", RMSE_4)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cVc4PaTle_Ai"
      },
      "source": [
        "#### Case 5: MLP_2_dm_L2\n",
        "- de-mean y\n",
        "- #of obs.: 10,000\n",
        "- two hidden layers + ReLU\n",
        "- regulization: Weight Decay (L2)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "rkhlfP0He_Aj"
      },
      "outputs": [],
      "source": [
        "def build_model_5():\n",
        "    net = nn.Sequential()\n",
        "    net.add(nn.Dense(num_hidden, activation = 'relu'),\n",
        "            nn.Dense(num_hidden, activation = 'relu'),\n",
        "            nn.Dense(1))\n",
        "    print(net)  # display the model\n",
        "    net.initialize(init.Normal(sigma=0.01))\n",
        "    return net"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "FARHf4Vme_Al"
      },
      "outputs": [],
      "source": [
        "def train_model_5(net, train_x, train_y, val_x, val_y, batch_size, train_num, wd, lr = 0.005, epochs=3000, compare_start = 50, compare = 50, tol = 0.001):\n",
        "    l2_loss = gluon.loss.L2Loss()\n",
        "    trainer = gluon.Trainer(net.collect_params(), 'sgd', {'learning_rate' : lr, 'wd':wd}) # 設定weight_decay\n",
        "    net.collect_params('.*bias').setattr('wd_mult', 0)\n",
        "    train_iter = load_array((train_x, train_y), batch_size = batch_size) # Create data iterator\n",
        "\n",
        "    train_RMSEs = []\n",
        "    val_RMSEs = []\n",
        "\n",
        "    for epoch in range(epochs): # start training\n",
        "        cum_loss = 0\n",
        "        i_list = []\n",
        "        for i, (data, label) in enumerate(train_iter):\n",
        "            data = data.as_in_context(model_cpu)\n",
        "            label = label.as_in_context(model_cpu)\n",
        "            with autograd.record():\n",
        "                output = net(data)\n",
        "                loss = l2_loss(output, label)\n",
        "            loss.backward()\n",
        "            trainer.step(batch_size)\n",
        "            cum_loss += np.mean(loss)\n",
        "\n",
        "        pre_y = net(val_x).reshape(-1,)\n",
        "        val_RMSE = RMSE(val_y, pre_y)\n",
        "        val_RMSEs.append(val_RMSE)\n",
        "        train_RMSE = numpy.sqrt(cum_loss/train_num)\n",
        "        train_RMSEs.append(train_RMSE)\n",
        "        print(\"Epoch %s, RMSE: %s, validation RMSE: %s\" % (epoch+1, train_RMSE, val_RMSE))\n",
        "\n",
        "        # Early stop conditions\n",
        "        if epoch > compare_start and abs(float(val_RMSEs[-compare]) - float(val_RMSEs[-1])) < tol:\n",
        "            break\n",
        "    return train_RMSEs, val_RMSEs"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "FwklwsKDe_Am",
        "outputId": "bf6fd6e3-ffdd-44cf-8891-f1f67a27c661"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Sequential(\n",
            "  (0): Dense(-1 -> 45, Activation(relu))\n",
            "  (1): Dense(-1 -> 45, Activation(relu))\n",
            "  (2): Dense(-1 -> 1, linear)\n",
            ")\n",
            "Epoch 1, RMSE: 0.7734769, validation RMSE: 10.921414\n",
            "Epoch 2, RMSE: 0.77347904, validation RMSE: 10.921391\n",
            "Epoch 3, RMSE: 0.77347493, validation RMSE: 10.921358\n",
            "Epoch 4, RMSE: 0.7734718, validation RMSE: 10.921313\n",
            "Epoch 5, RMSE: 0.7734681, validation RMSE: 10.921256\n",
            "Epoch 6, RMSE: 0.77346206, validation RMSE: 10.921135\n",
            "Epoch 7, RMSE: 0.7734501, validation RMSE: 10.92092\n",
            "Epoch 8, RMSE: 0.7734311, validation RMSE: 10.920496\n",
            "Epoch 9, RMSE: 0.77338296, validation RMSE: 10.919484\n",
            "Epoch 10, RMSE: 0.7732678, validation RMSE: 10.916355\n",
            "Epoch 11, RMSE: 0.7727792, validation RMSE: 10.901613\n",
            "Epoch 12, RMSE: 0.76894295, validation RMSE: 10.735907\n",
            "Epoch 13, RMSE: 0.7273125, validation RMSE: 9.614199\n",
            "Epoch 14, RMSE: 0.6695111, validation RMSE: 9.2506275\n",
            "Epoch 15, RMSE: 0.65525305, validation RMSE: 9.2289715\n",
            "Epoch 16, RMSE: 0.6494359, validation RMSE: 9.146535\n",
            "Epoch 17, RMSE: 0.6431247, validation RMSE: 9.193655\n",
            "Epoch 18, RMSE: 0.63835514, validation RMSE: 9.103993\n",
            "Epoch 19, RMSE: 0.63185143, validation RMSE: 9.221846\n",
            "Epoch 20, RMSE: 0.6280692, validation RMSE: 9.137383\n",
            "Epoch 21, RMSE: 0.623005, validation RMSE: 9.138818\n",
            "Epoch 22, RMSE: 0.6196447, validation RMSE: 9.187975\n",
            "Epoch 23, RMSE: 0.61339116, validation RMSE: 9.1691885\n",
            "Epoch 24, RMSE: 0.6076028, validation RMSE: 9.171821\n",
            "Epoch 25, RMSE: 0.6037743, validation RMSE: 9.213313\n",
            "Epoch 26, RMSE: 0.60037607, validation RMSE: 9.36939\n",
            "Epoch 27, RMSE: 0.59604037, validation RMSE: 9.479754\n",
            "Epoch 28, RMSE: 0.5919452, validation RMSE: 9.353186\n",
            "Epoch 29, RMSE: 0.58926326, validation RMSE: 9.488227\n",
            "Epoch 30, RMSE: 0.583662, validation RMSE: 9.348446\n",
            "Epoch 31, RMSE: 0.5772835, validation RMSE: 9.523245\n",
            "Epoch 32, RMSE: 0.57704365, validation RMSE: 9.476929\n"
          ]
        }
      ],
      "source": [
        "net_5 = build_model_5()\n",
        "train_RMSE_5, val_RMSE_5 = train_model_5(net_5,\n",
        "                                       train_x = x_to_train,\n",
        "                                       train_y = y_to_train_dmean,\n",
        "                                       val_x = x_val,\n",
        "                                       val_y = y_val_dmean,\n",
        "                                       batch_size = BATCH_SIZE,\n",
        "                                       wd = 0.03,\n",
        "                                       lr = 0.005,\n",
        "                                       tol = 0.015,\n",
        "                                       train_num = 10000,\n",
        "                                       compare_start = 20,\n",
        "                                       compare = 4)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "7qxsoF_ae_An",
        "outputId": "fff1f589-cb48-4298-a594-8035e5a5037c"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "plot_RMSE(train_RMSE_5, \"train\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "LcAnrazhe_Ao",
        "outputId": "d5e05785-b9cd-4721-d923-017ff328f342"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "plot_RMSE(val_RMSE_5, \"val\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "hNRLczvle_Ao",
        "outputId": "7f365aaf-7f9b-47e4-8b84-907d8a1c4eff"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([1998.3701, 1998.3704, 1998.3702, ..., 1998.3701, 1998.37  ,\n",
              "       1998.3704])"
            ]
          },
          "execution_count": 415,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Make prediction\n",
        "pre_5 = (net_5(x_test_std) + y_train_mean).reshape(-1,)\n",
        "pre_5"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Zh120D4Fe_Ap",
        "outputId": "003c32f5-147b-4647-be20-3da752597a87"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "RMSE =  10.852569\n"
          ]
        }
      ],
      "source": [
        "# Calculate RMSE\n",
        "RMSE_5 = RMSE(pre_5, y_test)\n",
        "print(\"RMSE = \", RMSE_5)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nii9cEOfe_Aq"
      },
      "source": [
        "#### Case 6: MLP_2_dm_dropou\n",
        "- de-mean y\n",
        "- #of obs.: 10,000\n",
        "- two hidden layers + ReLU\n",
        "- regulization: Dropout(rate = 0.5)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "kC6zm-mze_Aq"
      },
      "outputs": [],
      "source": [
        "def build_model_6():\n",
        "    net = nn.Sequential()\n",
        "    net.add(nn.Dense(num_hidden, activation = 'relu'),\n",
        "            nn.Dropout(0.5),\n",
        "            nn.Dense(num_hidden, activation = 'relu'),\n",
        "            nn.Dropout(0.5),\n",
        "            nn.Dense(1))\n",
        "    print(net)  # display the model\n",
        "    net.initialize(init.Normal(sigma=0.01))\n",
        "    return net"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "f5W2nf1Ve_Ar",
        "outputId": "1c64f4aa-ac42-445c-9534-43f9a1df371b"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Sequential(\n",
            "  (0): Dense(-1 -> 45, Activation(relu))\n",
            "  (1): Dropout(p = 0.5, axes=())\n",
            "  (2): Dense(-1 -> 45, Activation(relu))\n",
            "  (3): Dropout(p = 0.5, axes=())\n",
            "  (4): Dense(-1 -> 1, linear)\n",
            ")\n",
            "Epoch 1, RMSE: 0.7734707, validation RMSE: 10.921438\n",
            "Epoch 2, RMSE: 0.7734689, validation RMSE: 10.92143\n",
            "Epoch 3, RMSE: 0.7734706, validation RMSE: 10.921424\n",
            "Epoch 4, RMSE: 0.7734695, validation RMSE: 10.921417\n",
            "Epoch 5, RMSE: 0.77346677, validation RMSE: 10.92141\n",
            "Epoch 6, RMSE: 0.7734674, validation RMSE: 10.921402\n",
            "Epoch 7, RMSE: 0.7734673, validation RMSE: 10.921393\n",
            "Epoch 8, RMSE: 0.77346504, validation RMSE: 10.921384\n",
            "Epoch 9, RMSE: 0.7734659, validation RMSE: 10.921374\n",
            "Epoch 10, RMSE: 0.77346414, validation RMSE: 10.921362\n",
            "Epoch 11, RMSE: 0.7734655, validation RMSE: 10.921349\n",
            "Epoch 12, RMSE: 0.7734649, validation RMSE: 10.921331\n",
            "Epoch 13, RMSE: 0.7734612, validation RMSE: 10.921311\n",
            "Epoch 14, RMSE: 0.7734594, validation RMSE: 10.921287\n",
            "Epoch 15, RMSE: 0.77345926, validation RMSE: 10.921257\n",
            "Epoch 16, RMSE: 0.7734552, validation RMSE: 10.92122\n",
            "Epoch 17, RMSE: 0.77345204, validation RMSE: 10.921172\n",
            "Epoch 18, RMSE: 0.77345055, validation RMSE: 10.921113\n",
            "Epoch 19, RMSE: 0.77344406, validation RMSE: 10.921034\n",
            "Epoch 20, RMSE: 0.77344143, validation RMSE: 10.920937\n",
            "Epoch 21, RMSE: 0.7734309, validation RMSE: 10.920805\n",
            "Epoch 22, RMSE: 0.77342653, validation RMSE: 10.920635\n",
            "Epoch 23, RMSE: 0.7734123, validation RMSE: 10.92039\n",
            "Epoch 24, RMSE: 0.77338696, validation RMSE: 10.920026\n",
            "Epoch 25, RMSE: 0.7733605, validation RMSE: 10.919494\n",
            "Epoch 26, RMSE: 0.77331895, validation RMSE: 10.918673\n",
            "Epoch 27, RMSE: 0.7732507, validation RMSE: 10.9173355\n",
            "Epoch 28, RMSE: 0.77313256, validation RMSE: 10.914983\n",
            "Epoch 29, RMSE: 0.77290684, validation RMSE: 10.910443\n",
            "Epoch 30, RMSE: 0.7724695, validation RMSE: 10.900883\n",
            "Epoch 31, RMSE: 0.77134067, validation RMSE: 10.87561\n",
            "Epoch 32, RMSE: 0.7686727, validation RMSE: 10.804776\n",
            "Epoch 33, RMSE: 0.76049405, validation RMSE: 10.604501\n",
            "Epoch 34, RMSE: 0.74409205, validation RMSE: 10.277391\n",
            "Epoch 35, RMSE: 0.72114074, validation RMSE: 9.833342\n",
            "Epoch 36, RMSE: 0.70243055, validation RMSE: 9.551815\n",
            "Epoch 37, RMSE: 0.6886011, validation RMSE: 9.384414\n",
            "Epoch 38, RMSE: 0.68003434, validation RMSE: 9.310213\n",
            "Epoch 39, RMSE: 0.68121916, validation RMSE: 9.292308\n",
            "Epoch 40, RMSE: 0.6775436, validation RMSE: 9.275751\n",
            "Epoch 41, RMSE: 0.6728645, validation RMSE: 9.2246475\n",
            "Epoch 42, RMSE: 0.6700928, validation RMSE: 9.207746\n",
            "Epoch 43, RMSE: 0.66907257, validation RMSE: 9.218606\n",
            "Epoch 44, RMSE: 0.66136897, validation RMSE: 9.188878\n",
            "Epoch 45, RMSE: 0.6627712, validation RMSE: 9.165193\n",
            "Epoch 46, RMSE: 0.6613871, validation RMSE: 9.196735\n",
            "Epoch 47, RMSE: 0.6596024, validation RMSE: 9.1771555\n",
            "Epoch 48, RMSE: 0.6589981, validation RMSE: 9.147347\n",
            "Epoch 49, RMSE: 0.6532614, validation RMSE: 9.14582\n",
            "Epoch 50, RMSE: 0.65340346, validation RMSE: 9.1297\n",
            "Epoch 51, RMSE: 0.6529597, validation RMSE: 9.120547\n",
            "Epoch 52, RMSE: 0.65149397, validation RMSE: 9.117239\n",
            "Epoch 53, RMSE: 0.65031594, validation RMSE: 9.100054\n",
            "Epoch 54, RMSE: 0.6486086, validation RMSE: 9.101065\n",
            "Epoch 55, RMSE: 0.64573014, validation RMSE: 9.100601\n",
            "Epoch 56, RMSE: 0.64515704, validation RMSE: 9.119423\n",
            "Epoch 57, RMSE: 0.646266, validation RMSE: 9.102448\n",
            "Epoch 58, RMSE: 0.6443596, validation RMSE: 9.107144\n",
            "Epoch 59, RMSE: 0.6442781, validation RMSE: 9.137876\n",
            "Epoch 60, RMSE: 0.6451172, validation RMSE: 9.0836935\n",
            "Epoch 61, RMSE: 0.64134467, validation RMSE: 9.086238\n",
            "Epoch 62, RMSE: 0.63689715, validation RMSE: 9.122741\n",
            "Epoch 63, RMSE: 0.6394936, validation RMSE: 9.1174755\n",
            "Epoch 64, RMSE: 0.6371991, validation RMSE: 9.106565\n",
            "Epoch 65, RMSE: 0.6390241, validation RMSE: 9.088636\n",
            "Epoch 66, RMSE: 0.6377151, validation RMSE: 9.102672\n"
          ]
        }
      ],
      "source": [
        "net_6 = build_model_6()\n",
        "train_RMSE_6, val_RMSE_6 = train_model(net_6,\n",
        "                                       train_x = x_to_train,\n",
        "                                       train_y = y_to_train_dmean,\n",
        "                                       val_x = x_val,\n",
        "                                       val_y = y_val_dmean,\n",
        "                                       batch_size = BATCH_SIZE,\n",
        "                                       lr = 0.002,\n",
        "                                       tol = 0.005,\n",
        "                                       train_num = 10000,\n",
        "                                       compare = 10)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "QJwPdnZze_As",
        "outputId": "63207b59-a8aa-464b-ad1d-a94c2e77ef5a"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "plot_RMSE(train_RMSE_6, \"train\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "wNd5X7zYe_As",
        "outputId": "3524082a-58f6-43d7-80ed-9846c7b90728"
      },
      "outputs": [
        {
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "plot_RMSE(val_RMSE_6, \"val\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "EWDbktEOe_At",
        "outputId": "d53d9d16-93a0-41e2-fe58-fe7e324823f7"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([1991.6069, 1996.1189, 2002.3973, ..., 1998.7308, 2000.5498,\n",
              "       2000.5864])"
            ]
          },
          "execution_count": 363,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Make prediction\n",
        "pre_6 = (net_6(x_test_std) + y_train_mean).reshape(-1,)\n",
        "pre_6"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Gu5G5Fwwe_Au",
        "outputId": "aadb69d8-49ce-4b80-a75d-8693ad1ea293"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "RMSE =  9.166247\n"
          ]
        }
      ],
      "source": [
        "# Calculate RMSE\n",
        "RMSE_6 = RMSE(pre_6, y_test)\n",
        "print(\"RMSE = \", RMSE_6)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "oePBSRzGe_Au"
      },
      "source": [
        "#### Case 7: MLP_2_ykeep\n",
        "- original y\n",
        "- #of obs.: 10,000\n",
        "- two hidden layers + ReLU\n",
        "- no regulization"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "IF2NH1M0e_Av"
      },
      "outputs": [],
      "source": [
        "def build_model_7():\n",
        "    net = nn.Sequential()\n",
        "    net.add(nn.Dense(num_hidden, activation = 'relu'),\n",
        "            nn.Dense(num_hidden, activation = 'relu'),\n",
        "            nn.Dense(1))\n",
        "    print(net)  # display the model\n",
        "    net.initialize(init.Normal(sigma=0.01))\n",
        "    return net"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "4fuXtEU8e_Av"
      },
      "outputs": [],
      "source": [
        "def train_model_7(net, train_x, train_y, val_x, val_y, batch_size, train_num, lr = 0.005, epochs=3000, compare_start = 50, compare = 50, tol = 0.001):\n",
        "    l2_loss = gluon.loss.L2Loss()\n",
        "    trainer = gluon.Trainer(net.collect_params(), 'sgd', {'learning_rate' : lr})\n",
        "    train_iter = load_array((train_x, train_y), batch_size = batch_size) # Create data iterator\n",
        "\n",
        "    train_RMSEs = []\n",
        "    val_RMSEs = []\n",
        "\n",
        "    for epoch in range(epochs): # start training\n",
        "        cum_loss = 0\n",
        "        i_list = []\n",
        "        for i, (data, label) in enumerate(train_iter):\n",
        "            data = data.as_in_context(model_cpu)\n",
        "            label = label.as_in_context(model_cpu)\n",
        "            with autograd.record():\n",
        "                output = net(data)\n",
        "                loss = l2_loss(output, label)\n",
        "            loss.backward()\n",
        "            trainer.step(batch_size)\n",
        "            cum_loss += np.mean(loss)\n",
        "\n",
        "        pre_y = net(val_x).reshape(-1,)\n",
        "        val_RMSE = RMSE(val_y, pre_y)\n",
        "        val_RMSEs.append(val_RMSE)\n",
        "        train_RMSE = numpy.sqrt(cum_loss/train_num)\n",
        "        train_RMSEs.append(train_RMSE)\n",
        "        print(\"Epoch %s, RMSE: %s, validation RMSE: %s\" % (epoch+1, train_RMSE, val_RMSE))\n",
        "\n",
        "        # Early stop conditions\n",
        "        if epoch > compare_start and abs(float(val_RMSEs[-compare]) - float(val_RMSEs[-1])) < tol:\n",
        "            break\n",
        "    return train_RMSEs, val_RMSEs"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Q9WQU0o3e_Aw",
        "outputId": "4a4e10f2-3848-46a2-a5f7-6da826a8328c"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Sequential(\n",
            "  (0): Dense(-1 -> 45, Activation(relu))\n",
            "  (1): Dense(-1 -> 45, Activation(relu))\n",
            "  (2): Dense(-1 -> 1, linear)\n",
            ")\n",
            "Epoch 1, RMSE: 141.30121, validation RMSE: 1998.1965\n",
            "Epoch 2, RMSE: 141.28705, validation RMSE: 1997.9963\n",
            "Epoch 3, RMSE: 141.2729, validation RMSE: 1997.7961\n",
            "Epoch 4, RMSE: 141.25874, validation RMSE: 1997.5958\n",
            "Epoch 5, RMSE: 141.24455, validation RMSE: 1997.3951\n",
            "Epoch 6, RMSE: 141.23036, validation RMSE: 1997.1942\n",
            "Epoch 7, RMSE: 141.21616, validation RMSE: 1996.9927\n",
            "Epoch 8, RMSE: 141.20189, validation RMSE: 1996.7903\n",
            "Epoch 9, RMSE: 141.18752, validation RMSE: 1996.5865\n",
            "Epoch 10, RMSE: 141.17302, validation RMSE: 1996.3806\n",
            "Epoch 11, RMSE: 141.15837, validation RMSE: 1996.1716\n",
            "Epoch 12, RMSE: 141.14345, validation RMSE: 1995.958\n",
            "Epoch 13, RMSE: 141.12813, validation RMSE: 1995.7374\n",
            "Epoch 14, RMSE: 141.11214, validation RMSE: 1995.506\n",
            "Epoch 15, RMSE: 141.09526, validation RMSE: 1995.2583\n",
            "Epoch 16, RMSE: 141.07698, validation RMSE: 1994.9862\n",
            "Epoch 17, RMSE: 141.05653, validation RMSE: 1994.6766\n",
            "Epoch 18, RMSE: 141.03276, validation RMSE: 1994.3098\n",
            "Epoch 19, RMSE: 141.00397, validation RMSE: 1993.8539\n",
            "Epoch 20, RMSE: 140.96715, validation RMSE: 1993.256\n",
            "Epoch 21, RMSE: 140.91733, validation RMSE: 1992.4193\n",
            "Epoch 22, RMSE: 140.84431, validation RMSE: 1991.133\n",
            "Epoch 23, RMSE: 140.72226, validation RMSE: 1988.7792\n",
            "Epoch 24, RMSE: 140.45274, validation RMSE: 1982.5038\n",
            "Epoch 25, RMSE: 139.33246, validation RMSE: 1944.8507\n",
            "Epoch 26, RMSE: 121.6709, validation RMSE: 1087.9133\n",
            "Epoch 27, RMSE: 56.424267, validation RMSE: 607.8371\n",
            "Epoch 28, RMSE: 33.48814, validation RMSE: 354.44653\n",
            "Epoch 29, RMSE: 20.366776, validation RMSE: 237.66344\n",
            "Epoch 30, RMSE: 14.199668, validation RMSE: 175.7617\n",
            "Epoch 31, RMSE: 10.553079, validation RMSE: 134.90155\n",
            "Epoch 32, RMSE: 8.156332, validation RMSE: 107.54764\n",
            "Epoch 33, RMSE: 6.485645, validation RMSE: 88.10493\n",
            "Epoch 34, RMSE: 5.31676, validation RMSE: 74.65397\n",
            "Epoch 35, RMSE: 4.4784303, validation RMSE: 64.13611\n",
            "Epoch 36, RMSE: 3.8363247, validation RMSE: 56.608208\n",
            "Epoch 37, RMSE: 3.3563273, validation RMSE: 49.8875\n",
            "Epoch 38, RMSE: 2.9566982, validation RMSE: 45.28551\n",
            "Epoch 39, RMSE: 2.6472838, validation RMSE: 41.454834\n",
            "Epoch 40, RMSE: 2.399905, validation RMSE: 37.980865\n",
            "Epoch 41, RMSE: 2.1977084, validation RMSE: 35.238956\n",
            "Epoch 42, RMSE: 2.024511, validation RMSE: 33.19641\n",
            "Epoch 43, RMSE: 1.8716099, validation RMSE: 31.045813\n",
            "Epoch 44, RMSE: 1.7463714, validation RMSE: 29.45609\n",
            "Epoch 45, RMSE: 1.6366614, validation RMSE: 27.952972\n",
            "Epoch 46, RMSE: 1.5365571, validation RMSE: 26.6862\n",
            "Epoch 47, RMSE: 1.4544302, validation RMSE: 25.378029\n",
            "Epoch 48, RMSE: 1.3722708, validation RMSE: 24.765121\n",
            "Epoch 49, RMSE: 1.3082186, validation RMSE: 23.817427\n",
            "Epoch 50, RMSE: 1.24963, validation RMSE: 22.804272\n",
            "Epoch 51, RMSE: 1.2023464, validation RMSE: 21.985527\n",
            "Epoch 52, RMSE: 1.1571182, validation RMSE: 21.581871\n",
            "Epoch 53, RMSE: 1.1132247, validation RMSE: 21.088324\n",
            "Epoch 54, RMSE: 1.0749927, validation RMSE: 20.383654\n",
            "Epoch 55, RMSE: 1.0476203, validation RMSE: 20.314648\n",
            "Epoch 56, RMSE: 1.0170606, validation RMSE: 19.856724\n",
            "Epoch 57, RMSE: 0.9945853, validation RMSE: 19.212006\n",
            "Epoch 58, RMSE: 0.9686059, validation RMSE: 19.05584\n",
            "Epoch 59, RMSE: 0.9486788, validation RMSE: 18.645464\n",
            "Epoch 60, RMSE: 0.92917705, validation RMSE: 18.235924\n",
            "Epoch 61, RMSE: 0.91393906, validation RMSE: 17.966743\n",
            "Epoch 62, RMSE: 0.90080255, validation RMSE: 17.835203\n",
            "Epoch 63, RMSE: 0.8852033, validation RMSE: 17.771828\n",
            "Epoch 64, RMSE: 0.87069935, validation RMSE: 17.421642\n",
            "Epoch 65, RMSE: 0.8608419, validation RMSE: 17.258425\n",
            "Epoch 66, RMSE: 0.85157096, validation RMSE: 17.127806\n",
            "Epoch 67, RMSE: 0.83993006, validation RMSE: 16.880358\n",
            "Epoch 68, RMSE: 0.8326148, validation RMSE: 16.697262\n",
            "Epoch 69, RMSE: 0.8242633, validation RMSE: 16.760994\n",
            "Epoch 70, RMSE: 0.81624544, validation RMSE: 16.59476\n",
            "Epoch 71, RMSE: 0.80823225, validation RMSE: 16.355164\n",
            "Epoch 72, RMSE: 0.80182993, validation RMSE: 16.092873\n",
            "Epoch 73, RMSE: 0.79561496, validation RMSE: 16.250792\n",
            "Epoch 74, RMSE: 0.79042095, validation RMSE: 16.10761\n",
            "Epoch 75, RMSE: 0.7841068, validation RMSE: 15.982486\n",
            "Epoch 76, RMSE: 0.7794807, validation RMSE: 15.802281\n",
            "Epoch 77, RMSE: 0.7746342, validation RMSE: 15.746607\n",
            "Epoch 78, RMSE: 0.76963955, validation RMSE: 15.857181\n",
            "Epoch 79, RMSE: 0.7661309, validation RMSE: 15.761286\n",
            "Epoch 80, RMSE: 0.7638272, validation RMSE: 15.527162\n",
            "Epoch 81, RMSE: 0.75846577, validation RMSE: 15.519784\n",
            "Epoch 82, RMSE: 0.7545789, validation RMSE: 15.372092\n",
            "Epoch 83, RMSE: 0.75211483, validation RMSE: 15.500661\n",
            "Epoch 84, RMSE: 0.74989045, validation RMSE: 15.2636\n",
            "Epoch 85, RMSE: 0.7453079, validation RMSE: 15.060117\n",
            "Epoch 86, RMSE: 0.74367756, validation RMSE: 15.207398\n",
            "Epoch 87, RMSE: 0.73978156, validation RMSE: 15.12194\n",
            "Epoch 88, RMSE: 0.73724884, validation RMSE: 14.934928\n",
            "Epoch 89, RMSE: 0.7348466, validation RMSE: 15.011965\n",
            "Epoch 90, RMSE: 0.7324216, validation RMSE: 14.824106\n",
            "Epoch 91, RMSE: 0.7315426, validation RMSE: 14.842663\n",
            "Epoch 92, RMSE: 0.7285377, validation RMSE: 14.7983\n",
            "Epoch 93, RMSE: 0.72693384, validation RMSE: 14.762383\n",
            "Epoch 94, RMSE: 0.7259861, validation RMSE: 14.737324\n",
            "Epoch 95, RMSE: 0.7230571, validation RMSE: 14.674442\n",
            "Epoch 96, RMSE: 0.7214441, validation RMSE: 14.750871\n",
            "Epoch 97, RMSE: 0.7201304, validation RMSE: 14.6421385\n",
            "Epoch 98, RMSE: 0.7190427, validation RMSE: 14.460839\n",
            "Epoch 99, RMSE: 0.71744454, validation RMSE: 14.462995\n",
            "Epoch 100, RMSE: 0.71547157, validation RMSE: 14.546658\n",
            "Epoch 101, RMSE: 0.71440923, validation RMSE: 14.435964\n",
            "Epoch 102, RMSE: 0.7133503, validation RMSE: 14.448835\n",
            "Epoch 103, RMSE: 0.711181, validation RMSE: 14.466767\n",
            "Epoch 104, RMSE: 0.71068186, validation RMSE: 14.367508\n",
            "Epoch 105, RMSE: 0.709927, validation RMSE: 14.225683\n",
            "Epoch 106, RMSE: 0.7088278, validation RMSE: 14.46912\n",
            "Epoch 107, RMSE: 0.7072815, validation RMSE: 14.228887\n",
            "Epoch 108, RMSE: 0.7068824, validation RMSE: 14.308575\n",
            "Epoch 109, RMSE: 0.7060639, validation RMSE: 14.204854\n",
            "Epoch 110, RMSE: 0.7047324, validation RMSE: 14.154751\n",
            "Epoch 111, RMSE: 0.70371866, validation RMSE: 14.297795\n",
            "Epoch 112, RMSE: 0.7032475, validation RMSE: 14.165155\n",
            "Epoch 113, RMSE: 0.7030706, validation RMSE: 14.158375\n",
            "Epoch 114, RMSE: 0.70167726, validation RMSE: 14.041539\n",
            "Epoch 115, RMSE: 0.70071733, validation RMSE: 14.118804\n",
            "Epoch 116, RMSE: 0.70032644, validation RMSE: 14.125481\n",
            "Epoch 117, RMSE: 0.6991736, validation RMSE: 14.084055\n",
            "Epoch 118, RMSE: 0.69865245, validation RMSE: 14.133109\n",
            "Epoch 119, RMSE: 0.6970527, validation RMSE: 13.895944\n",
            "Epoch 120, RMSE: 0.69696116, validation RMSE: 14.105772\n",
            "Epoch 121, RMSE: 0.69660527, validation RMSE: 13.952264\n",
            "Epoch 122, RMSE: 0.6960669, validation RMSE: 13.814629\n",
            "Epoch 123, RMSE: 0.69591296, validation RMSE: 13.949087\n",
            "Epoch 124, RMSE: 0.6943403, validation RMSE: 13.89598\n",
            "Epoch 125, RMSE: 0.6953586, validation RMSE: 13.924184\n",
            "Epoch 126, RMSE: 0.69308835, validation RMSE: 13.94113\n",
            "Epoch 127, RMSE: 0.6938638, validation RMSE: 13.819027\n",
            "Epoch 128, RMSE: 0.69202906, validation RMSE: 13.8760605\n",
            "Epoch 129, RMSE: 0.6916462, validation RMSE: 13.723974\n",
            "Epoch 130, RMSE: 0.691822, validation RMSE: 13.884079\n",
            "Epoch 131, RMSE: 0.6917192, validation RMSE: 13.844708\n",
            "Epoch 132, RMSE: 0.69098294, validation RMSE: 13.854151\n",
            "Epoch 133, RMSE: 0.6901219, validation RMSE: 13.800384\n",
            "Epoch 134, RMSE: 0.6898941, validation RMSE: 13.820287\n",
            "Epoch 135, RMSE: 0.68937385, validation RMSE: 13.677601\n",
            "Epoch 136, RMSE: 0.6898325, validation RMSE: 13.825007\n"
          ]
        }
      ],
      "source": [
        "net_7 = build_model_7()\n",
        "train_RMSE_7, val_RMSE_7 = train_model_7(net_7,\n",
        "                                       train_x = x_to_train,\n",
        "                                       train_y = y_to_train,\n",
        "                                       val_x = x_val,\n",
        "                                       val_y = y_val,\n",
        "                                       batch_size = BATCH_SIZE,\n",
        "                                       lr = 1e-6,\n",
        "                                       tol = 0.01,\n",
        "                                       train_num = 10000,\n",
        "                                       compare = 10)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "rQvDwcFAe_Ay",
        "outputId": "ecfc9981-88a1-442e-93d0-95e03b53cffc"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "plot_RMSE(train_RMSE_7, \"train\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "7WTQLCcwe_Ay",
        "outputId": "b9fbd2e6-7c22-45b1-9e32-c9e5cbff555c"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "plot_RMSE(val_RMSE_7, \"val\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "OFZXqJPVe_Az",
        "outputId": "7052a2c5-8111-40a7-9b20-8799c65186be"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([1992.1161, 1996.2963, 2001.3745, ..., 1997.5295, 1996.1489,\n",
              "       1998.2347])"
            ]
          },
          "execution_count": 376,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Make prediction\n",
        "pre_7 = (net_7(x_test_std)).reshape(-1,)\n",
        "pre_7"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Dua6IKije_Az",
        "outputId": "d9c6e37f-4d64-42b6-b1f6-7f37d7c22135"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "RMSE =  15.0533495\n"
          ]
        }
      ],
      "source": [
        "# Calculate RMSE\n",
        "RMSE_7 = RMSE(pre_7, y_test)\n",
        "print(\"RMSE = \", RMSE_7)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "AtVmj3JGe_A0"
      },
      "source": [
        "#### Case 8: MLP_2_ykeep_L2\n",
        "- original y\n",
        "- #of obs.: 10,000\n",
        "- two hidden layers + ReLU\n",
        "- regulization: Weight Decay (L2)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ZvCXBt-ce_A1"
      },
      "outputs": [],
      "source": [
        "def build_model_8():\n",
        "    net = nn.Sequential()\n",
        "    net.add(nn.Dense(num_hidden, activation = 'relu'),\n",
        "            nn.Dense(num_hidden, activation = 'relu'),\n",
        "            nn.Dense(1))\n",
        "    print(net)  # display the model\n",
        "    net.initialize(init.Normal(sigma=0.01))\n",
        "    return net"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "iQ8c3R_6e_A1",
        "outputId": "7d6c50f8-8a56-493b-da41-d392e82a9e5f"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Sequential(\n",
            "  (0): Dense(-1 -> 45, Activation(relu))\n",
            "  (1): Dense(-1 -> 45, Activation(relu))\n",
            "  (2): Dense(-1 -> 1, linear)\n",
            ")\n",
            "Epoch 1, RMSE: 592741.2, validation RMSE: 6413.523\n",
            "Epoch 2, RMSE: 451.26907, validation RMSE: 6349.704\n",
            "Epoch 3, RMSE: 446.7788, validation RMSE: 6286.522\n",
            "Epoch 4, RMSE: 442.33307, validation RMSE: 6223.9663\n",
            "Epoch 5, RMSE: 437.93155, validation RMSE: 6162.0337\n",
            "Epoch 6, RMSE: 433.57376, validation RMSE: 6100.715\n",
            "Epoch 7, RMSE: 429.2593, validation RMSE: 6040.009\n",
            "Epoch 8, RMSE: 424.98785, validation RMSE: 5979.9067\n",
            "Epoch 9, RMSE: 420.75897, validation RMSE: 5920.402\n",
            "Epoch 10, RMSE: 416.57208, validation RMSE: 5861.4897\n",
            "Epoch 11, RMSE: 412.4269, validation RMSE: 5803.1646\n",
            "Epoch 12, RMSE: 408.32303, validation RMSE: 5745.419\n",
            "Epoch 13, RMSE: 404.25992, validation RMSE: 5688.249\n",
            "Epoch 14, RMSE: 400.2374, validation RMSE: 5631.6484\n",
            "Epoch 15, RMSE: 396.25482, validation RMSE: 5575.61\n",
            "Epoch 16, RMSE: 392.3119, validation RMSE: 5520.1304\n",
            "Epoch 17, RMSE: 388.40814, validation RMSE: 5465.202\n",
            "Epoch 18, RMSE: 384.54324, validation RMSE: 5410.819\n",
            "Epoch 19, RMSE: 380.71674, validation RMSE: 5356.977\n",
            "Epoch 20, RMSE: 376.9284, validation RMSE: 5303.6714\n",
            "Epoch 21, RMSE: 373.17764, validation RMSE: 5250.8955\n",
            "Epoch 22, RMSE: 369.46417, validation RMSE: 5198.6455\n",
            "Epoch 23, RMSE: 365.78778, validation RMSE: 5146.914\n",
            "Epoch 24, RMSE: 362.14798, validation RMSE: 5095.6997\n",
            "Epoch 25, RMSE: 358.5443, validation RMSE: 5044.9946\n",
            "Epoch 26, RMSE: 354.97662, validation RMSE: 4994.7935\n",
            "Epoch 27, RMSE: 351.44437, validation RMSE: 4945.0923\n",
            "Epoch 28, RMSE: 347.9473, validation RMSE: 4895.885\n",
            "Epoch 29, RMSE: 344.48492, validation RMSE: 4847.167\n",
            "Epoch 30, RMSE: 341.05704, validation RMSE: 4798.934\n",
            "Epoch 31, RMSE: 337.6633, validation RMSE: 4751.1816\n",
            "Epoch 32, RMSE: 334.3034, validation RMSE: 4703.905\n",
            "Epoch 33, RMSE: 330.9768, validation RMSE: 4657.098\n",
            "Epoch 34, RMSE: 327.68335, validation RMSE: 4610.7563\n",
            "Epoch 35, RMSE: 324.42264, validation RMSE: 4564.8755\n",
            "Epoch 36, RMSE: 321.19437, validation RMSE: 4519.4507\n",
            "Epoch 37, RMSE: 317.99823, validation RMSE: 4474.4795\n",
            "Epoch 38, RMSE: 314.83392, validation RMSE: 4429.954\n",
            "Epoch 39, RMSE: 311.70114, validation RMSE: 4385.875\n",
            "Epoch 40, RMSE: 308.59958, validation RMSE: 4342.2334\n",
            "Epoch 41, RMSE: 305.5289, validation RMSE: 4299.0264\n",
            "Epoch 42, RMSE: 302.48874, validation RMSE: 4256.2485\n",
            "Epoch 43, RMSE: 299.47876, validation RMSE: 4213.8955\n",
            "Epoch 44, RMSE: 296.49875, validation RMSE: 4171.9644\n",
            "Epoch 45, RMSE: 293.5484, validation RMSE: 4130.451\n",
            "Epoch 46, RMSE: 290.6274, validation RMSE: 4089.35\n",
            "Epoch 47, RMSE: 287.73547, validation RMSE: 4048.659\n",
            "Epoch 48, RMSE: 284.8723, validation RMSE: 4008.372\n",
            "Epoch 49, RMSE: 282.03772, validation RMSE: 3968.4866\n",
            "Epoch 50, RMSE: 279.23123, validation RMSE: 3928.9976\n",
            "Epoch 51, RMSE: 276.4527, validation RMSE: 3889.901\n",
            "Epoch 52, RMSE: 273.7018, validation RMSE: 3851.194\n",
            "Epoch 53, RMSE: 270.9783, validation RMSE: 3812.873\n",
            "Epoch 54, RMSE: 268.28195, validation RMSE: 3774.9316\n",
            "Epoch 55, RMSE: 265.61237, validation RMSE: 3737.369\n",
            "Epoch 56, RMSE: 262.9693, validation RMSE: 3700.1797\n",
            "Epoch 57, RMSE: 260.35263, validation RMSE: 3663.3606\n",
            "Epoch 58, RMSE: 257.762, validation RMSE: 3626.9077\n",
            "Epoch 59, RMSE: 255.19705, validation RMSE: 3590.8179\n",
            "Epoch 60, RMSE: 252.65771, validation RMSE: 3555.087\n",
            "Epoch 61, RMSE: 250.14362, validation RMSE: 3519.7112\n",
            "Epoch 62, RMSE: 247.65446, validation RMSE: 3484.6877\n",
            "Epoch 63, RMSE: 245.19016, validation RMSE: 3450.0127\n",
            "Epoch 64, RMSE: 242.75037, validation RMSE: 3415.6826\n",
            "Epoch 65, RMSE: 240.33481, validation RMSE: 3381.6946\n",
            "Epoch 66, RMSE: 237.94336, validation RMSE: 3348.0454\n",
            "Epoch 67, RMSE: 235.57576, validation RMSE: 3314.731\n",
            "Epoch 68, RMSE: 233.23166, validation RMSE: 3281.7468\n",
            "Epoch 69, RMSE: 230.91084, validation RMSE: 3249.0923\n",
            "Epoch 70, RMSE: 228.61314, validation RMSE: 3216.7617\n",
            "Epoch 71, RMSE: 226.3383, validation RMSE: 3184.753\n",
            "Epoch 72, RMSE: 224.08615, validation RMSE: 3153.0632\n",
            "Epoch 73, RMSE: 221.85635, validation RMSE: 3121.6882\n",
            "Epoch 74, RMSE: 219.64874, validation RMSE: 3090.625\n",
            "Epoch 75, RMSE: 217.4631, validation RMSE: 3059.8716\n",
            "Epoch 76, RMSE: 215.29922, validation RMSE: 3029.4238\n",
            "Epoch 77, RMSE: 213.15686, validation RMSE: 2999.2793\n",
            "Epoch 78, RMSE: 211.03581, validation RMSE: 2969.435\n",
            "Epoch 79, RMSE: 208.93588, validation RMSE: 2939.8877\n",
            "Epoch 80, RMSE: 206.85689, validation RMSE: 2910.634\n",
            "Epoch 81, RMSE: 204.79855, validation RMSE: 2881.6716\n",
            "Epoch 82, RMSE: 202.7607, validation RMSE: 2852.9973\n",
            "Epoch 83, RMSE: 200.74312, validation RMSE: 2824.6086\n",
            "Epoch 84, RMSE: 198.74562, validation RMSE: 2796.5022\n",
            "Epoch 85, RMSE: 196.76799, validation RMSE: 2768.6753\n",
            "Epoch 86, RMSE: 194.81004, validation RMSE: 2741.1257\n",
            "Epoch 87, RMSE: 192.87158, validation RMSE: 2713.8503\n",
            "Epoch 88, RMSE: 190.95244, validation RMSE: 2686.8462\n",
            "Epoch 89, RMSE: 189.05237, validation RMSE: 2660.111\n",
            "Epoch 90, RMSE: 187.17123, validation RMSE: 2633.6416\n",
            "Epoch 91, RMSE: 185.30876, validation RMSE: 2607.4353\n",
            "Epoch 92, RMSE: 183.46483, validation RMSE: 2581.4902\n",
            "Epoch 93, RMSE: 181.63931, validation RMSE: 2555.8032\n",
            "Epoch 94, RMSE: 179.83192, validation RMSE: 2530.3718\n",
            "Epoch 95, RMSE: 178.04251, validation RMSE: 2505.1934\n",
            "Epoch 96, RMSE: 176.27089, validation RMSE: 2480.2656\n",
            "Epoch 97, RMSE: 174.51692, validation RMSE: 2455.5857\n",
            "Epoch 98, RMSE: 172.7804, validation RMSE: 2431.1514\n",
            "Epoch 99, RMSE: 171.06114, validation RMSE: 2406.9602\n",
            "Epoch 100, RMSE: 169.35902, validation RMSE: 2383.01\n",
            "Epoch 101, RMSE: 167.67381, validation RMSE: 2359.298\n",
            "Epoch 102, RMSE: 166.00539, validation RMSE: 2335.822\n",
            "Epoch 103, RMSE: 164.35358, validation RMSE: 2312.5793\n",
            "Epoch 104, RMSE: 162.71815, validation RMSE: 2289.5684\n",
            "Epoch 105, RMSE: 161.09906, validation RMSE: 2266.7861\n",
            "Epoch 106, RMSE: 159.4961, validation RMSE: 2244.2305\n",
            "Epoch 107, RMSE: 157.90901, validation RMSE: 2221.8994\n",
            "Epoch 108, RMSE: 156.33775, validation RMSE: 2199.7905\n",
            "Epoch 109, RMSE: 154.78209, validation RMSE: 2177.9016\n",
            "Epoch 110, RMSE: 153.24197, validation RMSE: 2156.2307\n",
            "Epoch 111, RMSE: 151.71718, validation RMSE: 2134.7751\n",
            "Epoch 112, RMSE: 150.20752, validation RMSE: 2113.533\n",
            "Epoch 113, RMSE: 148.71288, validation RMSE: 2092.5027\n",
            "Epoch 114, RMSE: 147.23312, validation RMSE: 2071.6814\n",
            "Epoch 115, RMSE: 145.7681, validation RMSE: 2051.0674\n",
            "Epoch 116, RMSE: 144.31764, validation RMSE: 2030.6584\n",
            "Epoch 117, RMSE: 142.88164, validation RMSE: 2010.4526\n",
            "Epoch 118, RMSE: 141.45992, validation RMSE: 1990.4478\n",
            "Epoch 119, RMSE: 140.05232, validation RMSE: 1970.6421\n",
            "Epoch 120, RMSE: 138.65877, validation RMSE: 1951.0336\n",
            "Epoch 121, RMSE: 137.27907, validation RMSE: 1931.62\n",
            "Epoch 122, RMSE: 135.91309, validation RMSE: 1912.3997\n",
            "Epoch 123, RMSE: 134.5607, validation RMSE: 1893.3706\n",
            "Epoch 124, RMSE: 133.22177, validation RMSE: 1874.5309\n",
            "Epoch 125, RMSE: 131.89616, validation RMSE: 1855.8788\n",
            "Epoch 126, RMSE: 130.58377, validation RMSE: 1837.4122\n",
            "Epoch 127, RMSE: 129.28441, validation RMSE: 1819.1294\n",
            "Epoch 128, RMSE: 127.99801, validation RMSE: 1801.0283\n",
            "Epoch 129, RMSE: 126.72439, validation RMSE: 1783.1075\n",
            "Epoch 130, RMSE: 125.463455, validation RMSE: 1765.3651\n",
            "Epoch 131, RMSE: 124.21503, validation RMSE: 1747.7991\n",
            "Epoch 132, RMSE: 122.979065, validation RMSE: 1730.408\n",
            "Epoch 133, RMSE: 121.75538, validation RMSE: 1713.1898\n",
            "Epoch 134, RMSE: 120.543884, validation RMSE: 1696.1432\n",
            "Epoch 135, RMSE: 119.34446, validation RMSE: 1679.2661\n",
            "Epoch 136, RMSE: 118.15693, validation RMSE: 1662.5569\n",
            "Epoch 137, RMSE: 116.981255, validation RMSE: 1646.0143\n",
            "Epoch 138, RMSE: 115.81727, validation RMSE: 1629.6361\n",
            "Epoch 139, RMSE: 114.66487, validation RMSE: 1613.4208\n",
            "Epoch 140, RMSE: 113.52392, validation RMSE: 1597.3667\n",
            "Epoch 141, RMSE: 112.39433, validation RMSE: 1581.4727\n",
            "Epoch 142, RMSE: 111.27598, validation RMSE: 1565.7367\n",
            "Epoch 143, RMSE: 110.16877, validation RMSE: 1550.1575\n",
            "Epoch 144, RMSE: 109.07258, validation RMSE: 1534.7329\n",
            "Epoch 145, RMSE: 107.98729, validation RMSE: 1519.4622\n",
            "Epoch 146, RMSE: 106.912796, validation RMSE: 1504.3433\n",
            "Epoch 147, RMSE: 105.84902, validation RMSE: 1489.3748\n",
            "Epoch 148, RMSE: 104.79579, validation RMSE: 1474.555\n",
            "Epoch 149, RMSE: 103.75304, validation RMSE: 1459.8829\n",
            "Epoch 150, RMSE: 102.72066, validation RMSE: 1445.3567\n",
            "Epoch 151, RMSE: 101.698586, validation RMSE: 1430.9751\n",
            "Epoch 152, RMSE: 100.686676, validation RMSE: 1416.7365\n",
            "Epoch 153, RMSE: 99.68482, validation RMSE: 1402.6399\n",
            "Epoch 154, RMSE: 98.69294, validation RMSE: 1388.6836\n",
            "Epoch 155, RMSE: 97.71096, validation RMSE: 1374.8658\n",
            "Epoch 156, RMSE: 96.73871, validation RMSE: 1361.1862\n",
            "Epoch 157, RMSE: 95.77616, validation RMSE: 1347.6422\n",
            "Epoch 158, RMSE: 94.8232, validation RMSE: 1334.2329\n",
            "Epoch 159, RMSE: 93.879684, validation RMSE: 1320.9572\n",
            "Epoch 160, RMSE: 92.94559, validation RMSE: 1307.8138\n",
            "Epoch 161, RMSE: 92.02077, validation RMSE: 1294.8009\n",
            "Epoch 162, RMSE: 91.10517, validation RMSE: 1281.9175\n",
            "Epoch 163, RMSE: 90.19868, validation RMSE: 1269.1625\n",
            "Epoch 164, RMSE: 89.30121, validation RMSE: 1256.5343\n",
            "Epoch 165, RMSE: 88.41266, validation RMSE: 1244.0319\n",
            "Epoch 166, RMSE: 87.53297, validation RMSE: 1231.6542\n",
            "Epoch 167, RMSE: 86.66203, validation RMSE: 1219.3994\n",
            "Epoch 168, RMSE: 85.79976, validation RMSE: 1207.2665\n",
            "Epoch 169, RMSE: 84.946075, validation RMSE: 1195.2543\n",
            "Epoch 170, RMSE: 84.100845, validation RMSE: 1183.3612\n",
            "Epoch 171, RMSE: 83.264046, validation RMSE: 1171.5868\n",
            "Epoch 172, RMSE: 82.43558, validation RMSE: 1159.9298\n",
            "Epoch 173, RMSE: 81.61538, validation RMSE: 1148.3889\n",
            "Epoch 174, RMSE: 80.80332, validation RMSE: 1136.9626\n",
            "Epoch 175, RMSE: 79.99935, validation RMSE: 1125.6501\n",
            "Epoch 176, RMSE: 79.20338, validation RMSE: 1114.4501\n",
            "Epoch 177, RMSE: 78.41533, validation RMSE: 1103.3619\n",
            "Epoch 178, RMSE: 77.63513, validation RMSE: 1092.384\n",
            "Epoch 179, RMSE: 76.862686, validation RMSE: 1081.5146\n",
            "Epoch 180, RMSE: 76.097916, validation RMSE: 1070.7539\n",
            "Epoch 181, RMSE: 75.34075, validation RMSE: 1060.1001\n",
            "Epoch 182, RMSE: 74.59113, validation RMSE: 1049.5525\n",
            "Epoch 183, RMSE: 73.849, validation RMSE: 1039.1101\n",
            "Epoch 184, RMSE: 73.114235, validation RMSE: 1028.7716\n",
            "Epoch 185, RMSE: 72.38681, validation RMSE: 1018.5359\n",
            "Epoch 186, RMSE: 71.6666, validation RMSE: 1008.4021\n",
            "Epoch 187, RMSE: 70.95356, validation RMSE: 998.3688\n",
            "Epoch 188, RMSE: 70.24759, validation RMSE: 988.4352\n",
            "Epoch 189, RMSE: 69.54865, validation RMSE: 978.6007\n",
            "Epoch 190, RMSE: 68.85668, validation RMSE: 968.8641\n",
            "Epoch 191, RMSE: 68.17158, validation RMSE: 959.2243\n",
            "Epoch 192, RMSE: 67.49331, validation RMSE: 949.68036\n",
            "Epoch 193, RMSE: 66.82177, validation RMSE: 940.23145\n",
            "Epoch 194, RMSE: 66.15692, validation RMSE: 930.87646\n",
            "Epoch 195, RMSE: 65.49868, validation RMSE: 921.6147\n",
            "Epoch 196, RMSE: 64.84702, validation RMSE: 912.4452\n",
            "Epoch 197, RMSE: 64.20183, validation RMSE: 903.3668\n",
            "Epoch 198, RMSE: 63.56308, validation RMSE: 894.3797\n",
            "Epoch 199, RMSE: 62.930748, validation RMSE: 885.4819\n",
            "Epoch 200, RMSE: 62.304657, validation RMSE: 876.6722\n",
            "Epoch 201, RMSE: 61.684803, validation RMSE: 867.94995\n",
            "Epoch 202, RMSE: 61.07105, validation RMSE: 859.3142\n",
            "Epoch 203, RMSE: 60.46342, validation RMSE: 850.7646\n",
            "Epoch 204, RMSE: 59.861877, validation RMSE: 842.3005\n",
            "Epoch 205, RMSE: 59.266315, validation RMSE: 833.92017\n",
            "Epoch 206, RMSE: 58.676693, validation RMSE: 825.624\n",
            "Epoch 207, RMSE: 58.092907, validation RMSE: 817.4095\n",
            "Epoch 208, RMSE: 57.51494, validation RMSE: 809.27747\n",
            "Epoch 209, RMSE: 56.94273, validation RMSE: 801.2257\n",
            "Epoch 210, RMSE: 56.37622, validation RMSE: 793.25415\n",
            "Epoch 211, RMSE: 55.81534, validation RMSE: 785.36224\n",
            "Epoch 212, RMSE: 55.260056, validation RMSE: 777.549\n",
            "Epoch 213, RMSE: 54.710274, validation RMSE: 769.81323\n",
            "Epoch 214, RMSE: 54.16595, validation RMSE: 762.15405\n",
            "Epoch 215, RMSE: 53.627033, validation RMSE: 754.57135\n",
            "Epoch 216, RMSE: 53.09353, validation RMSE: 747.0648\n",
            "Epoch 217, RMSE: 52.565342, validation RMSE: 739.63257\n",
            "Epoch 218, RMSE: 52.04239, validation RMSE: 732.274\n",
            "Epoch 219, RMSE: 51.524647, validation RMSE: 724.9891\n",
            "Epoch 220, RMSE: 51.012043, validation RMSE: 717.7761\n",
            "Epoch 221, RMSE: 50.504524, validation RMSE: 710.63513\n",
            "Epoch 222, RMSE: 50.002087, validation RMSE: 703.5656\n",
            "Epoch 223, RMSE: 49.50467, validation RMSE: 696.566\n",
            "Epoch 224, RMSE: 49.01215, validation RMSE: 689.63666\n",
            "Epoch 225, RMSE: 48.524586, validation RMSE: 682.77637\n",
            "Epoch 226, RMSE: 48.04189, validation RMSE: 675.98425\n",
            "Epoch 227, RMSE: 47.56398, validation RMSE: 669.2595\n",
            "Epoch 228, RMSE: 47.090828, validation RMSE: 662.6016\n",
            "Epoch 229, RMSE: 46.622356, validation RMSE: 656.0104\n",
            "Epoch 230, RMSE: 46.158607, validation RMSE: 649.4854\n",
            "Epoch 231, RMSE: 45.699467, validation RMSE: 643.0242\n",
            "Epoch 232, RMSE: 45.244846, validation RMSE: 636.62787\n",
            "Epoch 233, RMSE: 44.794785, validation RMSE: 630.2947\n",
            "Epoch 234, RMSE: 44.349194, validation RMSE: 624.02527\n",
            "Epoch 235, RMSE: 43.908035, validation RMSE: 617.8175\n",
            "Epoch 236, RMSE: 43.471245, validation RMSE: 611.67175\n",
            "Epoch 237, RMSE: 43.03882, validation RMSE: 605.58716\n",
            "Epoch 238, RMSE: 42.610714, validation RMSE: 599.5635\n",
            "Epoch 239, RMSE: 42.186867, validation RMSE: 593.5996\n",
            "Epoch 240, RMSE: 41.76725, validation RMSE: 587.69525\n",
            "Epoch 241, RMSE: 41.351788, validation RMSE: 581.84937\n",
            "Epoch 242, RMSE: 40.940437, validation RMSE: 576.06104\n",
            "Epoch 243, RMSE: 40.533176, validation RMSE: 570.3307\n",
            "Epoch 244, RMSE: 40.129967, validation RMSE: 564.6573\n",
            "Epoch 245, RMSE: 39.73078, validation RMSE: 559.04004\n",
            "Epoch 246, RMSE: 39.335556, validation RMSE: 553.47925\n",
            "Epoch 247, RMSE: 38.944263, validation RMSE: 547.97363\n",
            "Epoch 248, RMSE: 38.556896, validation RMSE: 542.5231\n",
            "Epoch 249, RMSE: 38.17337, validation RMSE: 537.1266\n",
            "Epoch 250, RMSE: 37.793674, validation RMSE: 531.7838\n",
            "Epoch 251, RMSE: 37.417747, validation RMSE: 526.4945\n",
            "Epoch 252, RMSE: 37.045586, validation RMSE: 521.2579\n",
            "Epoch 253, RMSE: 36.677116, validation RMSE: 516.0729\n",
            "Epoch 254, RMSE: 36.31229, validation RMSE: 510.93964\n",
            "Epoch 255, RMSE: 35.951107, validation RMSE: 505.85803\n",
            "Epoch 256, RMSE: 35.59358, validation RMSE: 500.82663\n",
            "Epoch 257, RMSE: 35.239536, validation RMSE: 495.84528\n",
            "Epoch 258, RMSE: 34.889038, validation RMSE: 490.91336\n",
            "Epoch 259, RMSE: 34.542034, validation RMSE: 486.03094\n",
            "Epoch 260, RMSE: 34.198494, validation RMSE: 481.19748\n",
            "Epoch 261, RMSE: 33.858406, validation RMSE: 476.41196\n",
            "Epoch 262, RMSE: 33.52168, validation RMSE: 471.67386\n",
            "Epoch 263, RMSE: 33.188305, validation RMSE: 466.98285\n",
            "Epoch 264, RMSE: 32.858246, validation RMSE: 462.339\n",
            "Epoch 265, RMSE: 32.531464, validation RMSE: 457.74106\n",
            "Epoch 266, RMSE: 32.207966, validation RMSE: 453.18903\n",
            "Epoch 267, RMSE: 31.88768, validation RMSE: 448.68204\n",
            "Epoch 268, RMSE: 31.57054, validation RMSE: 444.2196\n",
            "Epoch 269, RMSE: 31.256557, validation RMSE: 439.8019\n",
            "Epoch 270, RMSE: 30.945742, validation RMSE: 435.42816\n",
            "Epoch 271, RMSE: 30.63798, validation RMSE: 431.09735\n",
            "Epoch 272, RMSE: 30.333256, validation RMSE: 426.80994\n",
            "Epoch 273, RMSE: 30.031612, validation RMSE: 422.56622\n",
            "Epoch 274, RMSE: 29.732983, validation RMSE: 418.364\n",
            "Epoch 275, RMSE: 29.437307, validation RMSE: 414.20346\n",
            "Epoch 276, RMSE: 29.144567, validation RMSE: 410.08456\n",
            "Epoch 277, RMSE: 28.854755, validation RMSE: 406.00656\n",
            "Epoch 278, RMSE: 28.567871, validation RMSE: 401.97006\n",
            "Epoch 279, RMSE: 28.283821, validation RMSE: 397.9729\n",
            "Epoch 280, RMSE: 28.002571, validation RMSE: 394.01532\n",
            "Epoch 281, RMSE: 27.724112, validation RMSE: 390.09787\n",
            "Epoch 282, RMSE: 27.44846, validation RMSE: 386.21854\n",
            "Epoch 283, RMSE: 27.175514, validation RMSE: 382.37842\n",
            "Epoch 284, RMSE: 26.905312, validation RMSE: 378.57654\n",
            "Epoch 285, RMSE: 26.63781, validation RMSE: 374.81274\n",
            "Epoch 286, RMSE: 26.37295, validation RMSE: 371.08582\n",
            "Epoch 287, RMSE: 26.110754, validation RMSE: 367.39664\n",
            "Epoch 288, RMSE: 25.851171, validation RMSE: 363.74396\n",
            "Epoch 289, RMSE: 25.594149, validation RMSE: 360.12756\n",
            "Epoch 290, RMSE: 25.33971, validation RMSE: 356.54758\n",
            "Epoch 291, RMSE: 25.087816, validation RMSE: 353.00287\n",
            "Epoch 292, RMSE: 24.838425, validation RMSE: 349.49408\n",
            "Epoch 293, RMSE: 24.591524, validation RMSE: 346.01996\n",
            "Epoch 294, RMSE: 24.347063, validation RMSE: 342.57977\n",
            "Epoch 295, RMSE: 24.105019, validation RMSE: 339.17404\n",
            "Epoch 296, RMSE: 23.8654, validation RMSE: 335.80267\n",
            "Epoch 297, RMSE: 23.628197, validation RMSE: 332.46545\n",
            "Epoch 298, RMSE: 23.39334, validation RMSE: 329.16052\n",
            "Epoch 299, RMSE: 23.16079, validation RMSE: 325.88815\n",
            "Epoch 300, RMSE: 22.930561, validation RMSE: 322.64902\n",
            "Epoch 301, RMSE: 22.702654, validation RMSE: 319.44202\n",
            "Epoch 302, RMSE: 22.477024, validation RMSE: 316.2676\n",
            "Epoch 303, RMSE: 22.25367, validation RMSE: 313.1244\n",
            "Epoch 304, RMSE: 22.0325, validation RMSE: 310.01227\n",
            "Epoch 305, RMSE: 21.813528, validation RMSE: 306.93143\n",
            "Epoch 306, RMSE: 21.596745, validation RMSE: 303.88113\n",
            "Epoch 307, RMSE: 21.3821, validation RMSE: 300.8609\n",
            "Epoch 308, RMSE: 21.169617, validation RMSE: 297.87134\n",
            "Epoch 309, RMSE: 20.959295, validation RMSE: 294.91217\n",
            "Epoch 310, RMSE: 20.751047, validation RMSE: 291.98145\n",
            "Epoch 311, RMSE: 20.544842, validation RMSE: 289.0798\n",
            "Epoch 312, RMSE: 20.340687, validation RMSE: 286.2075\n",
            "Epoch 313, RMSE: 20.138575, validation RMSE: 283.36374\n",
            "Epoch 314, RMSE: 19.938492, validation RMSE: 280.54837\n",
            "Epoch 315, RMSE: 19.740376, validation RMSE: 277.7606\n",
            "Epoch 316, RMSE: 19.544231, validation RMSE: 275.0008\n",
            "Epoch 317, RMSE: 19.350069, validation RMSE: 272.26907\n",
            "Epoch 318, RMSE: 19.157866, validation RMSE: 269.56436\n",
            "Epoch 319, RMSE: 18.96755, validation RMSE: 266.8863\n",
            "Epoch 320, RMSE: 18.779104, validation RMSE: 264.23483\n",
            "Epoch 321, RMSE: 18.592567, validation RMSE: 261.61066\n",
            "Epoch 322, RMSE: 18.407919, validation RMSE: 259.01236\n",
            "Epoch 323, RMSE: 18.225073, validation RMSE: 256.43887\n",
            "Epoch 324, RMSE: 18.044027, validation RMSE: 253.89226\n",
            "Epoch 325, RMSE: 17.86483, validation RMSE: 251.37056\n",
            "Epoch 326, RMSE: 17.687418, validation RMSE: 248.87454\n",
            "Epoch 327, RMSE: 17.511747, validation RMSE: 246.40233\n",
            "Epoch 328, RMSE: 17.337841, validation RMSE: 243.95529\n",
            "Epoch 329, RMSE: 17.16567, validation RMSE: 241.5327\n",
            "Epoch 330, RMSE: 16.99521, validation RMSE: 239.13431\n",
            "Epoch 331, RMSE: 16.826454, validation RMSE: 236.75974\n",
            "Epoch 332, RMSE: 16.65937, validation RMSE: 234.40862\n",
            "Epoch 333, RMSE: 16.493935, validation RMSE: 232.08122\n",
            "Epoch 334, RMSE: 16.330206, validation RMSE: 229.77765\n",
            "Epoch 335, RMSE: 16.168104, validation RMSE: 227.4962\n",
            "Epoch 336, RMSE: 16.007572, validation RMSE: 225.23749\n",
            "Epoch 337, RMSE: 15.8486395, validation RMSE: 223.00139\n",
            "Epoch 338, RMSE: 15.691324, validation RMSE: 220.78775\n",
            "Epoch 339, RMSE: 15.535531, validation RMSE: 218.59566\n",
            "Epoch 340, RMSE: 15.381335, validation RMSE: 216.42639\n",
            "Epoch 341, RMSE: 15.228698, validation RMSE: 214.27876\n",
            "Epoch 342, RMSE: 15.077582, validation RMSE: 212.15204\n",
            "Epoch 343, RMSE: 14.927959, validation RMSE: 210.04659\n",
            "Epoch 344, RMSE: 14.779796, validation RMSE: 207.96191\n",
            "Epoch 345, RMSE: 14.633118, validation RMSE: 205.89803\n",
            "Epoch 346, RMSE: 14.487933, validation RMSE: 203.85553\n",
            "Epoch 347, RMSE: 14.344175, validation RMSE: 201.83223\n",
            "Epoch 348, RMSE: 14.201855, validation RMSE: 199.83006\n",
            "Epoch 349, RMSE: 14.060963, validation RMSE: 197.84734\n",
            "Epoch 350, RMSE: 13.921466, validation RMSE: 195.88467\n",
            "Epoch 351, RMSE: 13.783358, validation RMSE: 193.94144\n",
            "Epoch 352, RMSE: 13.646601, validation RMSE: 192.01729\n",
            "Epoch 353, RMSE: 13.511255, validation RMSE: 190.11281\n",
            "Epoch 354, RMSE: 13.377282, validation RMSE: 188.22777\n",
            "Epoch 355, RMSE: 13.244623, validation RMSE: 186.36108\n",
            "Epoch 356, RMSE: 13.113263, validation RMSE: 184.51274\n",
            "Epoch 357, RMSE: 12.983226, validation RMSE: 182.68285\n",
            "Epoch 358, RMSE: 12.854472, validation RMSE: 180.87155\n",
            "Epoch 359, RMSE: 12.727034, validation RMSE: 179.07835\n",
            "Epoch 360, RMSE: 12.600859, validation RMSE: 177.30276\n",
            "Epoch 361, RMSE: 12.475942, validation RMSE: 175.54553\n",
            "Epoch 362, RMSE: 12.352273, validation RMSE: 173.80528\n",
            "Epoch 363, RMSE: 12.229851, validation RMSE: 172.08302\n",
            "Epoch 364, RMSE: 12.10866, validation RMSE: 170.37764\n",
            "Epoch 365, RMSE: 11.988703, validation RMSE: 168.68987\n",
            "Epoch 366, RMSE: 11.869944, validation RMSE: 167.01874\n",
            "Epoch 367, RMSE: 11.752339, validation RMSE: 165.36363\n",
            "Epoch 368, RMSE: 11.635898, validation RMSE: 163.72552\n",
            "Epoch 369, RMSE: 11.520661, validation RMSE: 162.10419\n",
            "Epoch 370, RMSE: 11.406578, validation RMSE: 160.49886\n",
            "Epoch 371, RMSE: 11.293596, validation RMSE: 158.90897\n",
            "Epoch 372, RMSE: 11.181738, validation RMSE: 157.3351\n",
            "Epoch 373, RMSE: 11.071021, validation RMSE: 155.7775\n",
            "Epoch 374, RMSE: 10.961421, validation RMSE: 154.23532\n",
            "Epoch 375, RMSE: 10.852912, validation RMSE: 152.70845\n",
            "Epoch 376, RMSE: 10.745452, validation RMSE: 151.19637\n",
            "Epoch 377, RMSE: 10.6390705, validation RMSE: 149.6996\n",
            "Epoch 378, RMSE: 10.533792, validation RMSE: 148.21837\n",
            "Epoch 379, RMSE: 10.429539, validation RMSE: 146.75098\n",
            "Epoch 380, RMSE: 10.326304, validation RMSE: 145.29875\n",
            "Epoch 381, RMSE: 10.224148, validation RMSE: 143.86147\n",
            "Epoch 382, RMSE: 10.123001, validation RMSE: 142.43825\n",
            "Epoch 383, RMSE: 10.0228815, validation RMSE: 141.02998\n",
            "Epoch 384, RMSE: 9.923766, validation RMSE: 139.63493\n",
            "Epoch 385, RMSE: 9.825604, validation RMSE: 138.2536\n",
            "Epoch 386, RMSE: 9.728419, validation RMSE: 136.88599\n",
            "Epoch 387, RMSE: 9.632228, validation RMSE: 135.53256\n",
            "Epoch 388, RMSE: 9.536985, validation RMSE: 134.19287\n",
            "Epoch 389, RMSE: 9.442714, validation RMSE: 132.86601\n",
            "Epoch 390, RMSE: 9.3493595, validation RMSE: 131.55266\n",
            "Epoch 391, RMSE: 9.256986, validation RMSE: 130.253\n",
            "Epoch 392, RMSE: 9.165535, validation RMSE: 128.96597\n",
            "Epoch 393, RMSE: 9.074986, validation RMSE: 127.69229\n",
            "Epoch 394, RMSE: 8.985379, validation RMSE: 126.43135\n",
            "Epoch 395, RMSE: 8.896638, validation RMSE: 125.18254\n",
            "Epoch 396, RMSE: 8.808783, validation RMSE: 123.94635\n",
            "Epoch 397, RMSE: 8.721795, validation RMSE: 122.72291\n",
            "Epoch 398, RMSE: 8.635719, validation RMSE: 121.511475\n",
            "Epoch 399, RMSE: 8.5504675, validation RMSE: 120.312416\n",
            "Epoch 400, RMSE: 8.466124, validation RMSE: 119.125244\n",
            "Epoch 401, RMSE: 8.382583, validation RMSE: 117.94961\n",
            "Epoch 402, RMSE: 8.299856, validation RMSE: 116.78585\n",
            "Epoch 403, RMSE: 8.218002, validation RMSE: 115.63436\n",
            "Epoch 404, RMSE: 8.136983, validation RMSE: 114.49426\n",
            "Epoch 405, RMSE: 8.056772, validation RMSE: 113.365456\n",
            "Epoch 406, RMSE: 7.9773664, validation RMSE: 112.248405\n",
            "Epoch 407, RMSE: 7.898757, validation RMSE: 111.14241\n",
            "Epoch 408, RMSE: 7.8209457, validation RMSE: 110.04757\n",
            "Epoch 409, RMSE: 7.7438855, validation RMSE: 108.963165\n",
            "Epoch 410, RMSE: 7.667591, validation RMSE: 107.889305\n",
            "Epoch 411, RMSE: 7.5920405, validation RMSE: 106.826485\n",
            "Epoch 412, RMSE: 7.517292, validation RMSE: 105.774826\n",
            "Epoch 413, RMSE: 7.4432607, validation RMSE: 104.73324\n",
            "Epoch 414, RMSE: 7.3699884, validation RMSE: 103.70221\n",
            "Epoch 415, RMSE: 7.297436, validation RMSE: 102.68148\n",
            "Epoch 416, RMSE: 7.2256265, validation RMSE: 101.670944\n",
            "Epoch 417, RMSE: 7.1545467, validation RMSE: 100.67109\n",
            "Epoch 418, RMSE: 7.084221, validation RMSE: 99.68154\n",
            "Epoch 419, RMSE: 7.01456, validation RMSE: 98.70096\n",
            "Epoch 420, RMSE: 6.9456215, validation RMSE: 97.73155\n",
            "Epoch 421, RMSE: 6.8773923, validation RMSE: 96.77111\n",
            "Epoch 422, RMSE: 6.8098335, validation RMSE: 95.82086\n",
            "Epoch 423, RMSE: 6.7429724, validation RMSE: 94.880196\n",
            "Epoch 424, RMSE: 6.676758, validation RMSE: 93.94839\n",
            "Epoch 425, RMSE: 6.611218, validation RMSE: 93.026276\n",
            "Epoch 426, RMSE: 6.546342, validation RMSE: 92.11338\n",
            "Epoch 427, RMSE: 6.4821095, validation RMSE: 91.20971\n",
            "Epoch 428, RMSE: 6.418568, validation RMSE: 90.31586\n",
            "Epoch 429, RMSE: 6.3556256, validation RMSE: 89.43014\n",
            "Epoch 430, RMSE: 6.2933245, validation RMSE: 88.55364\n",
            "Epoch 431, RMSE: 6.2316785, validation RMSE: 87.68611\n",
            "Epoch 432, RMSE: 6.1706376, validation RMSE: 86.82756\n",
            "Epoch 433, RMSE: 6.110228, validation RMSE: 85.97702\n",
            "Epoch 434, RMSE: 6.0503883, validation RMSE: 85.13532\n",
            "Epoch 435, RMSE: 5.9911833, validation RMSE: 84.30237\n",
            "Epoch 436, RMSE: 5.9325776, validation RMSE: 83.47778\n",
            "Epoch 437, RMSE: 5.874566, validation RMSE: 82.66181\n",
            "Epoch 438, RMSE: 5.8171597, validation RMSE: 81.853836\n",
            "Epoch 439, RMSE: 5.7602925, validation RMSE: 81.053635\n",
            "Epoch 440, RMSE: 5.7040296, validation RMSE: 80.26228\n",
            "Epoch 441, RMSE: 5.6483126, validation RMSE: 79.477974\n",
            "Epoch 442, RMSE: 5.5931473, validation RMSE: 78.70179\n",
            "Epoch 443, RMSE: 5.53855, validation RMSE: 77.93385\n",
            "Epoch 444, RMSE: 5.4845057, validation RMSE: 77.173325\n",
            "Epoch 445, RMSE: 5.4310293, validation RMSE: 76.4214\n",
            "Epoch 446, RMSE: 5.3781104, validation RMSE: 75.6764\n",
            "Epoch 447, RMSE: 5.3257003, validation RMSE: 74.93928\n",
            "Epoch 448, RMSE: 5.2738333, validation RMSE: 74.20932\n",
            "Epoch 449, RMSE: 5.222483, validation RMSE: 73.486885\n",
            "Epoch 450, RMSE: 5.171655, validation RMSE: 72.77185\n",
            "Epoch 451, RMSE: 5.121354, validation RMSE: 72.064095\n",
            "Epoch 452, RMSE: 5.071585, validation RMSE: 71.36362\n",
            "Epoch 453, RMSE: 5.022282, validation RMSE: 70.669945\n",
            "Epoch 454, RMSE: 4.973489, validation RMSE: 69.98331\n",
            "Epoch 455, RMSE: 4.9251866, validation RMSE: 69.303955\n",
            "Epoch 456, RMSE: 4.877364, validation RMSE: 68.631035\n",
            "Epoch 457, RMSE: 4.830035, validation RMSE: 67.96516\n",
            "Epoch 458, RMSE: 4.7831864, validation RMSE: 67.30583\n",
            "Epoch 459, RMSE: 4.7368107, validation RMSE: 66.65379\n",
            "Epoch 460, RMSE: 4.690956, validation RMSE: 66.00842\n",
            "Epoch 461, RMSE: 4.6455584, validation RMSE: 65.369736\n",
            "Epoch 462, RMSE: 4.600632, validation RMSE: 64.73796\n",
            "Epoch 463, RMSE: 4.5561514, validation RMSE: 64.11154\n",
            "Epoch 464, RMSE: 4.5121055, validation RMSE: 63.491917\n",
            "Epoch 465, RMSE: 4.468514, validation RMSE: 62.87897\n",
            "Epoch 466, RMSE: 4.425407, validation RMSE: 62.272335\n",
            "Epoch 467, RMSE: 4.3827443, validation RMSE: 61.67238\n",
            "Epoch 468, RMSE: 4.340504, validation RMSE: 61.077656\n",
            "Epoch 469, RMSE: 4.2986827, validation RMSE: 60.489365\n",
            "Epoch 470, RMSE: 4.2572823, validation RMSE: 59.90715\n",
            "Epoch 471, RMSE: 4.2163534, validation RMSE: 59.331127\n",
            "Epoch 472, RMSE: 4.1758294, validation RMSE: 58.760937\n",
            "Epoch 473, RMSE: 4.1356993, validation RMSE: 58.196583\n",
            "Epoch 474, RMSE: 4.09599, validation RMSE: 57.637703\n",
            "Epoch 475, RMSE: 4.0566797, validation RMSE: 57.08501\n",
            "Epoch 476, RMSE: 4.0177903, validation RMSE: 56.53732\n",
            "Epoch 477, RMSE: 3.979282, validation RMSE: 55.995934\n",
            "Epoch 478, RMSE: 3.941184, validation RMSE: 55.45978\n",
            "Epoch 479, RMSE: 3.9034743, validation RMSE: 54.928986\n",
            "Epoch 480, RMSE: 3.8661346, validation RMSE: 54.40426\n",
            "Epoch 481, RMSE: 3.829224, validation RMSE: 53.885246\n",
            "Epoch 482, RMSE: 3.7927353, validation RMSE: 53.37146\n",
            "Epoch 483, RMSE: 3.7566025, validation RMSE: 52.86327\n",
            "Epoch 484, RMSE: 3.720812, validation RMSE: 52.359234\n",
            "Epoch 485, RMSE: 3.685378, validation RMSE: 51.86127\n",
            "Epoch 486, RMSE: 3.6503327, validation RMSE: 51.3677\n",
            "Epoch 487, RMSE: 3.6155937, validation RMSE: 50.879242\n",
            "Epoch 488, RMSE: 3.5812626, validation RMSE: 50.396255\n",
            "Epoch 489, RMSE: 3.5472965, validation RMSE: 49.918377\n",
            "Epoch 490, RMSE: 3.5136993, validation RMSE: 49.44609\n",
            "Epoch 491, RMSE: 3.480446, validation RMSE: 48.97784\n",
            "Epoch 492, RMSE: 3.447537, validation RMSE: 48.514942\n",
            "Epoch 493, RMSE: 3.4149668, validation RMSE: 48.056793\n",
            "Epoch 494, RMSE: 3.382738, validation RMSE: 47.603397\n",
            "Epoch 495, RMSE: 3.3508549, validation RMSE: 47.15523\n",
            "Epoch 496, RMSE: 3.319316, validation RMSE: 46.710865\n",
            "Epoch 497, RMSE: 3.2880564, validation RMSE: 46.27125\n",
            "Epoch 498, RMSE: 3.257149, validation RMSE: 45.836624\n",
            "Epoch 499, RMSE: 3.226585, validation RMSE: 45.40663\n",
            "Epoch 500, RMSE: 3.1963189, validation RMSE: 44.980915\n",
            "Epoch 501, RMSE: 3.1663997, validation RMSE: 44.559944\n",
            "Epoch 502, RMSE: 3.1367936, validation RMSE: 44.14361\n",
            "Epoch 503, RMSE: 3.107506, validation RMSE: 43.73143\n",
            "Epoch 504, RMSE: 3.0785553, validation RMSE: 43.324585\n",
            "Epoch 505, RMSE: 3.049898, validation RMSE: 42.921307\n",
            "Epoch 506, RMSE: 3.0215304, validation RMSE: 42.521946\n",
            "Epoch 507, RMSE: 2.9934537, validation RMSE: 42.127094\n",
            "Epoch 508, RMSE: 2.9656675, validation RMSE: 41.735928\n",
            "Epoch 509, RMSE: 2.9381683, validation RMSE: 41.34915\n",
            "Epoch 510, RMSE: 2.9109535, validation RMSE: 40.966175\n",
            "Epoch 511, RMSE: 2.884037, validation RMSE: 40.587822\n",
            "Epoch 512, RMSE: 2.857422, validation RMSE: 40.213387\n",
            "Epoch 513, RMSE: 2.831079, validation RMSE: 39.842514\n",
            "Epoch 514, RMSE: 2.8049977, validation RMSE: 39.475914\n",
            "Epoch 515, RMSE: 2.7792203, validation RMSE: 39.11311\n",
            "Epoch 516, RMSE: 2.7536914, validation RMSE: 38.754223\n",
            "Epoch 517, RMSE: 2.7284627, validation RMSE: 38.399128\n",
            "Epoch 518, RMSE: 2.703468, validation RMSE: 38.047604\n",
            "Epoch 519, RMSE: 2.6787465, validation RMSE: 37.699867\n",
            "Epoch 520, RMSE: 2.6542969, validation RMSE: 37.355816\n",
            "Epoch 521, RMSE: 2.63012, validation RMSE: 37.01649\n",
            "Epoch 522, RMSE: 2.6062744, validation RMSE: 36.680843\n",
            "Epoch 523, RMSE: 2.5826707, validation RMSE: 36.34875\n",
            "Epoch 524, RMSE: 2.559317, validation RMSE: 36.019985\n",
            "Epoch 525, RMSE: 2.5361776, validation RMSE: 35.69466\n",
            "Epoch 526, RMSE: 2.5132906, validation RMSE: 35.372543\n",
            "Epoch 527, RMSE: 2.4906523, validation RMSE: 35.054337\n",
            "Epoch 528, RMSE: 2.4682643, validation RMSE: 34.7391\n",
            "Epoch 529, RMSE: 2.4461086, validation RMSE: 34.427418\n",
            "Epoch 530, RMSE: 2.424206, validation RMSE: 34.11987\n",
            "Epoch 531, RMSE: 2.4025905, validation RMSE: 33.815758\n",
            "Epoch 532, RMSE: 2.3811793, validation RMSE: 33.51427\n",
            "Epoch 533, RMSE: 2.3600101, validation RMSE: 33.21668\n",
            "Epoch 534, RMSE: 2.3390574, validation RMSE: 32.92206\n",
            "Epoch 535, RMSE: 2.3183396, validation RMSE: 32.630295\n",
            "Epoch 536, RMSE: 2.29784, validation RMSE: 32.342194\n",
            "Epoch 537, RMSE: 2.2775817, validation RMSE: 32.057407\n",
            "Epoch 538, RMSE: 2.2575376, validation RMSE: 31.775127\n",
            "Epoch 539, RMSE: 2.2377024, validation RMSE: 31.496275\n",
            "Epoch 540, RMSE: 2.2181027, validation RMSE: 31.220848\n",
            "Epoch 541, RMSE: 2.1987364, validation RMSE: 30.94827\n",
            "Epoch 542, RMSE: 2.179573, validation RMSE: 30.678432\n",
            "Epoch 543, RMSE: 2.160609, validation RMSE: 30.412241\n",
            "Epoch 544, RMSE: 2.1418645, validation RMSE: 30.148556\n",
            "Epoch 545, RMSE: 2.1233487, validation RMSE: 29.888172\n",
            "Epoch 546, RMSE: 2.1050575, validation RMSE: 29.630976\n",
            "Epoch 547, RMSE: 2.0869575, validation RMSE: 29.376282\n",
            "Epoch 548, RMSE: 2.0690641, validation RMSE: 29.124771\n",
            "Epoch 549, RMSE: 2.0513785, validation RMSE: 28.87599\n",
            "Epoch 550, RMSE: 2.0338933, validation RMSE: 28.630047\n",
            "Epoch 551, RMSE: 2.0166228, validation RMSE: 28.387167\n",
            "Epoch 552, RMSE: 1.9995005, validation RMSE: 28.146563\n",
            "Epoch 553, RMSE: 1.9826114, validation RMSE: 27.908903\n",
            "Epoch 554, RMSE: 1.9659036, validation RMSE: 27.673965\n",
            "Epoch 555, RMSE: 1.9493774, validation RMSE: 27.441746\n",
            "Epoch 556, RMSE: 1.9330658, validation RMSE: 27.21202\n",
            "Epoch 557, RMSE: 1.9169209, validation RMSE: 26.985012\n",
            "Epoch 558, RMSE: 1.9009577, validation RMSE: 26.760384\n",
            "Epoch 559, RMSE: 1.8851851, validation RMSE: 26.5388\n",
            "Epoch 560, RMSE: 1.8695843, validation RMSE: 26.31937\n",
            "Epoch 561, RMSE: 1.8541882, validation RMSE: 26.103203\n",
            "Epoch 562, RMSE: 1.8389823, validation RMSE: 25.888964\n",
            "Epoch 563, RMSE: 1.823946, validation RMSE: 25.67776\n",
            "Epoch 564, RMSE: 1.8090844, validation RMSE: 25.468594\n",
            "Epoch 565, RMSE: 1.7943631, validation RMSE: 25.261465\n",
            "Epoch 566, RMSE: 1.7798111, validation RMSE: 25.056812\n",
            "Epoch 567, RMSE: 1.7654244, validation RMSE: 24.854525\n",
            "Epoch 568, RMSE: 1.7512205, validation RMSE: 24.65482\n",
            "Epoch 569, RMSE: 1.737206, validation RMSE: 24.457804\n",
            "Epoch 570, RMSE: 1.7233366, validation RMSE: 24.262707\n",
            "Epoch 571, RMSE: 1.7096298, validation RMSE: 24.070074\n",
            "Epoch 572, RMSE: 1.6960872, validation RMSE: 23.879795\n",
            "Epoch 573, RMSE: 1.6827363, validation RMSE: 23.692192\n",
            "Epoch 574, RMSE: 1.6695257, validation RMSE: 23.506392\n",
            "Epoch 575, RMSE: 1.656512, validation RMSE: 23.323801\n",
            "Epoch 576, RMSE: 1.6436512, validation RMSE: 23.142578\n",
            "Epoch 577, RMSE: 1.6309274, validation RMSE: 22.963696\n",
            "Epoch 578, RMSE: 1.6183609, validation RMSE: 22.787468\n",
            "Epoch 579, RMSE: 1.6059934, validation RMSE: 22.61325\n",
            "Epoch 580, RMSE: 1.5937248, validation RMSE: 22.440506\n",
            "Epoch 581, RMSE: 1.5815765, validation RMSE: 22.269768\n",
            "Epoch 582, RMSE: 1.5696062, validation RMSE: 22.101461\n",
            "Epoch 583, RMSE: 1.5577973, validation RMSE: 21.935684\n",
            "Epoch 584, RMSE: 1.5461643, validation RMSE: 21.772644\n",
            "Epoch 585, RMSE: 1.5346917, validation RMSE: 21.610748\n",
            "Epoch 586, RMSE: 1.5233138, validation RMSE: 21.450634\n",
            "Epoch 587, RMSE: 1.5120802, validation RMSE: 21.292929\n",
            "Epoch 588, RMSE: 1.501021, validation RMSE: 21.137835\n",
            "Epoch 589, RMSE: 1.4900887, validation RMSE: 20.983568\n",
            "Epoch 590, RMSE: 1.479253, validation RMSE: 20.831594\n",
            "Epoch 591, RMSE: 1.4685783, validation RMSE: 20.681492\n",
            "Epoch 592, RMSE: 1.4580264, validation RMSE: 20.533049\n",
            "Epoch 593, RMSE: 1.4476124, validation RMSE: 20.38709\n",
            "Epoch 594, RMSE: 1.4373533, validation RMSE: 20.242374\n",
            "Epoch 595, RMSE: 1.427196, validation RMSE: 20.099924\n",
            "Epoch 596, RMSE: 1.4171965, validation RMSE: 19.959122\n",
            "Epoch 597, RMSE: 1.4073204, validation RMSE: 19.820374\n",
            "Epoch 598, RMSE: 1.3975588, validation RMSE: 19.683268\n",
            "Epoch 599, RMSE: 1.3879429, validation RMSE: 19.548304\n",
            "Epoch 600, RMSE: 1.3784397, validation RMSE: 19.41457\n",
            "Epoch 601, RMSE: 1.369065, validation RMSE: 19.28257\n",
            "Epoch 602, RMSE: 1.3597963, validation RMSE: 19.152498\n",
            "Epoch 603, RMSE: 1.3506311, validation RMSE: 19.02345\n",
            "Epoch 604, RMSE: 1.3416, validation RMSE: 18.896725\n",
            "Epoch 605, RMSE: 1.3326986, validation RMSE: 18.771715\n",
            "Epoch 606, RMSE: 1.3239229, validation RMSE: 18.648218\n",
            "Epoch 607, RMSE: 1.3152483, validation RMSE: 18.526428\n",
            "Epoch 608, RMSE: 1.3067114, validation RMSE: 18.406635\n",
            "Epoch 609, RMSE: 1.2983181, validation RMSE: 18.288538\n",
            "Epoch 610, RMSE: 1.2899684, validation RMSE: 18.170862\n",
            "Epoch 611, RMSE: 1.2817428, validation RMSE: 18.055752\n",
            "Epoch 612, RMSE: 1.2736847, validation RMSE: 17.942808\n",
            "Epoch 613, RMSE: 1.2657359, validation RMSE: 17.830765\n",
            "Epoch 614, RMSE: 1.2578782, validation RMSE: 17.720295\n",
            "Epoch 615, RMSE: 1.2501019, validation RMSE: 17.610916\n",
            "Epoch 616, RMSE: 1.2424258, validation RMSE: 17.5032\n",
            "Epoch 617, RMSE: 1.2348592, validation RMSE: 17.396952\n",
            "Epoch 618, RMSE: 1.2274168, validation RMSE: 17.292446\n",
            "Epoch 619, RMSE: 1.2200922, validation RMSE: 17.189491\n",
            "Epoch 620, RMSE: 1.2128464, validation RMSE: 17.087797\n",
            "Epoch 621, RMSE: 1.2057033, validation RMSE: 16.987267\n",
            "Epoch 622, RMSE: 1.1986543, validation RMSE: 16.888271\n",
            "Epoch 623, RMSE: 1.1917261, validation RMSE: 16.790895\n",
            "Epoch 624, RMSE: 1.184887, validation RMSE: 16.695133\n",
            "Epoch 625, RMSE: 1.1781645, validation RMSE: 16.600698\n",
            "Epoch 626, RMSE: 1.1715358, validation RMSE: 16.507221\n",
            "Epoch 627, RMSE: 1.1649634, validation RMSE: 16.41452\n",
            "Epoch 628, RMSE: 1.1584697, validation RMSE: 16.323774\n",
            "Epoch 629, RMSE: 1.1521003, validation RMSE: 16.234518\n",
            "Epoch 630, RMSE: 1.1458421, validation RMSE: 16.146297\n",
            "Epoch 631, RMSE: 1.139645, validation RMSE: 16.059286\n",
            "Epoch 632, RMSE: 1.1335398, validation RMSE: 15.973302\n",
            "Epoch 633, RMSE: 1.1274916, validation RMSE: 15.888521\n",
            "Epoch 634, RMSE: 1.1215603, validation RMSE: 15.805289\n",
            "Epoch 635, RMSE: 1.1157275, validation RMSE: 15.723422\n",
            "Epoch 636, RMSE: 1.1099733, validation RMSE: 15.642475\n",
            "Epoch 637, RMSE: 1.1042819, validation RMSE: 15.562533\n",
            "Epoch 638, RMSE: 1.098703, validation RMSE: 15.484459\n",
            "Epoch 639, RMSE: 1.0932233, validation RMSE: 15.407375\n",
            "Epoch 640, RMSE: 1.0877942, validation RMSE: 15.331022\n",
            "Epoch 641, RMSE: 1.082464, validation RMSE: 15.256337\n",
            "Epoch 642, RMSE: 1.0771904, validation RMSE: 15.182034\n",
            "Epoch 643, RMSE: 1.0720013, validation RMSE: 15.109301\n",
            "Epoch 644, RMSE: 1.0669231, validation RMSE: 15.038038\n",
            "Epoch 645, RMSE: 1.06191, validation RMSE: 14.967484\n",
            "Epoch 646, RMSE: 1.0569642, validation RMSE: 14.898304\n",
            "Epoch 647, RMSE: 1.0521014, validation RMSE: 14.829661\n",
            "Epoch 648, RMSE: 1.0472981, validation RMSE: 14.762542\n",
            "Epoch 649, RMSE: 1.0425764, validation RMSE: 14.695951\n",
            "Epoch 650, RMSE: 1.0378996, validation RMSE: 14.630464\n",
            "Epoch 651, RMSE: 1.033324, validation RMSE: 14.56615\n",
            "Epoch 652, RMSE: 1.0287911, validation RMSE: 14.502601\n",
            "Epoch 653, RMSE: 1.024368, validation RMSE: 14.440453\n",
            "Epoch 654, RMSE: 1.0200086, validation RMSE: 14.379454\n",
            "Epoch 655, RMSE: 1.0157315, validation RMSE: 14.3192\n",
            "Epoch 656, RMSE: 1.0114992, validation RMSE: 14.2597685\n",
            "Epoch 657, RMSE: 1.0073286, validation RMSE: 14.200997\n",
            "Epoch 658, RMSE: 1.0032135, validation RMSE: 14.1433525\n",
            "Epoch 659, RMSE: 0.999173, validation RMSE: 14.086823\n",
            "Epoch 660, RMSE: 0.9952188, validation RMSE: 14.031094\n",
            "Epoch 661, RMSE: 0.9912885, validation RMSE: 13.975855\n",
            "Epoch 662, RMSE: 0.9874328, validation RMSE: 13.921865\n",
            "Epoch 663, RMSE: 0.98363584, validation RMSE: 13.868734\n",
            "Epoch 664, RMSE: 0.979916, validation RMSE: 13.816308\n",
            "Epoch 665, RMSE: 0.97623914, validation RMSE: 13.764731\n",
            "Epoch 666, RMSE: 0.97263056, validation RMSE: 13.714218\n",
            "Epoch 667, RMSE: 0.96908516, validation RMSE: 13.66432\n",
            "Epoch 668, RMSE: 0.9656026, validation RMSE: 13.615617\n",
            "Epoch 669, RMSE: 0.9621754, validation RMSE: 13.567297\n",
            "Epoch 670, RMSE: 0.95879054, validation RMSE: 13.519869\n",
            "Epoch 671, RMSE: 0.9554767, validation RMSE: 13.473537\n",
            "Epoch 672, RMSE: 0.9522202, validation RMSE: 13.427438\n",
            "Epoch 673, RMSE: 0.9489868, validation RMSE: 13.38228\n",
            "Epoch 674, RMSE: 0.9458251, validation RMSE: 13.338196\n",
            "Epoch 675, RMSE: 0.9427391, validation RMSE: 13.294824\n",
            "Epoch 676, RMSE: 0.93969387, validation RMSE: 13.25195\n",
            "Epoch 677, RMSE: 0.9367045, validation RMSE: 13.209848\n",
            "Epoch 678, RMSE: 0.9337561, validation RMSE: 13.16865\n",
            "Epoch 679, RMSE: 0.9308499, validation RMSE: 13.127732\n",
            "Epoch 680, RMSE: 0.92798895, validation RMSE: 13.087638\n",
            "Epoch 681, RMSE: 0.9251687, validation RMSE: 13.047823\n",
            "Epoch 682, RMSE: 0.9223968, validation RMSE: 13.009152\n",
            "Epoch 683, RMSE: 0.9196858, validation RMSE: 12.971348\n",
            "Epoch 684, RMSE: 0.91703546, validation RMSE: 12.933874\n",
            "Epoch 685, RMSE: 0.91439956, validation RMSE: 12.896863\n",
            "Epoch 686, RMSE: 0.9118148, validation RMSE: 12.860701\n",
            "Epoch 687, RMSE: 0.90929997, validation RMSE: 12.825566\n",
            "Epoch 688, RMSE: 0.9068319, validation RMSE: 12.790748\n",
            "Epoch 689, RMSE: 0.9043865, validation RMSE: 12.756624\n",
            "Epoch 690, RMSE: 0.90198416, validation RMSE: 12.722686\n",
            "Epoch 691, RMSE: 0.89961976, validation RMSE: 12.689622\n",
            "Epoch 692, RMSE: 0.8972915, validation RMSE: 12.656925\n",
            "Epoch 693, RMSE: 0.89500725, validation RMSE: 12.624595\n",
            "Epoch 694, RMSE: 0.89274263, validation RMSE: 12.593117\n",
            "Epoch 695, RMSE: 0.89053744, validation RMSE: 12.562118\n",
            "Epoch 696, RMSE: 0.8883637, validation RMSE: 12.531592\n",
            "Epoch 697, RMSE: 0.886219, validation RMSE: 12.501359\n",
            "Epoch 698, RMSE: 0.8841181, validation RMSE: 12.472245\n",
            "Epoch 699, RMSE: 0.8820696, validation RMSE: 12.443469\n",
            "Epoch 700, RMSE: 0.8800578, validation RMSE: 12.415031\n",
            "Epoch 701, RMSE: 0.8780634, validation RMSE: 12.387217\n",
            "Epoch 702, RMSE: 0.87612224, validation RMSE: 12.359962\n",
            "Epoch 703, RMSE: 0.8742031, validation RMSE: 12.333147\n",
            "Epoch 704, RMSE: 0.8723271, validation RMSE: 12.30671\n",
            "Epoch 705, RMSE: 0.8704719, validation RMSE: 12.280705\n",
            "Epoch 706, RMSE: 0.8686639, validation RMSE: 12.255462\n",
            "Epoch 707, RMSE: 0.86688656, validation RMSE: 12.230362\n",
            "Epoch 708, RMSE: 0.86513597, validation RMSE: 12.205954\n",
            "Epoch 709, RMSE: 0.86342835, validation RMSE: 12.182011\n",
            "Epoch 710, RMSE: 0.8617372, validation RMSE: 12.158258\n",
            "Epoch 711, RMSE: 0.86007464, validation RMSE: 12.134912\n",
            "Epoch 712, RMSE: 0.8584495, validation RMSE: 12.111965\n",
            "Epoch 713, RMSE: 0.8568385, validation RMSE: 12.08952\n",
            "Epoch 714, RMSE: 0.8552688, validation RMSE: 12.067467\n",
            "Epoch 715, RMSE: 0.85371995, validation RMSE: 12.045751\n",
            "Epoch 716, RMSE: 0.85220224, validation RMSE: 12.024518\n",
            "Epoch 717, RMSE: 0.8507163, validation RMSE: 12.003714\n",
            "Epoch 718, RMSE: 0.8492675, validation RMSE: 11.983434\n",
            "Epoch 719, RMSE: 0.84782785, validation RMSE: 11.962972\n",
            "Epoch 720, RMSE: 0.84640837, validation RMSE: 11.943276\n",
            "Epoch 721, RMSE: 0.84503365, validation RMSE: 11.923942\n",
            "Epoch 722, RMSE: 0.84367645, validation RMSE: 11.905012\n",
            "Epoch 723, RMSE: 0.8423505, validation RMSE: 11.886289\n",
            "Epoch 724, RMSE: 0.8410469, validation RMSE: 11.868106\n",
            "Epoch 725, RMSE: 0.83976406, validation RMSE: 11.850028\n",
            "Epoch 726, RMSE: 0.8384997, validation RMSE: 11.832387\n",
            "Epoch 727, RMSE: 0.8372546, validation RMSE: 11.814755\n",
            "Epoch 728, RMSE: 0.8360255, validation RMSE: 11.797647\n",
            "Epoch 729, RMSE: 0.83482635, validation RMSE: 11.780824\n",
            "Epoch 730, RMSE: 0.8336534, validation RMSE: 11.764462\n",
            "Epoch 731, RMSE: 0.83250064, validation RMSE: 11.748288\n",
            "Epoch 732, RMSE: 0.8313779, validation RMSE: 11.732521\n",
            "Epoch 733, RMSE: 0.83027, validation RMSE: 11.717023\n",
            "Epoch 734, RMSE: 0.829183, validation RMSE: 11.701836\n",
            "Epoch 735, RMSE: 0.82812154, validation RMSE: 11.686779\n",
            "Epoch 736, RMSE: 0.8270645, validation RMSE: 11.672028\n",
            "Epoch 737, RMSE: 0.8260384, validation RMSE: 11.657791\n",
            "Epoch 738, RMSE: 0.8250431, validation RMSE: 11.643636\n",
            "Epoch 739, RMSE: 0.82405156, validation RMSE: 11.629815\n",
            "Epoch 740, RMSE: 0.8230871, validation RMSE: 11.616406\n",
            "Epoch 741, RMSE: 0.8221464, validation RMSE: 11.603197\n",
            "Epoch 742, RMSE: 0.82121783, validation RMSE: 11.590104\n",
            "Epoch 743, RMSE: 0.8202963, validation RMSE: 11.577086\n",
            "Epoch 744, RMSE: 0.8193818, validation RMSE: 11.564346\n",
            "Epoch 745, RMSE: 0.81850237, validation RMSE: 11.55208\n",
            "Epoch 746, RMSE: 0.81763655, validation RMSE: 11.54\n",
            "Epoch 747, RMSE: 0.8167806, validation RMSE: 11.527716\n",
            "Epoch 748, RMSE: 0.81592464, validation RMSE: 11.515932\n",
            "Epoch 749, RMSE: 0.81510735, validation RMSE: 11.504485\n",
            "Epoch 750, RMSE: 0.81431013, validation RMSE: 11.493369\n",
            "Epoch 751, RMSE: 0.8135294, validation RMSE: 11.482353\n",
            "Epoch 752, RMSE: 0.8127533, validation RMSE: 11.471398\n",
            "Epoch 753, RMSE: 0.8119863, validation RMSE: 11.46073\n",
            "Epoch 754, RMSE: 0.811243, validation RMSE: 11.450341\n",
            "Epoch 755, RMSE: 0.810526, validation RMSE: 11.440301\n",
            "Epoch 756, RMSE: 0.80980784, validation RMSE: 11.430171\n",
            "Epoch 757, RMSE: 0.8091023, validation RMSE: 11.420313\n",
            "Epoch 758, RMSE: 0.80840725, validation RMSE: 11.410474\n",
            "Epoch 759, RMSE: 0.80771446, validation RMSE: 11.400762\n",
            "Epoch 760, RMSE: 0.80704385, validation RMSE: 11.391384\n",
            "Epoch 761, RMSE: 0.80639076, validation RMSE: 11.382299\n",
            "Epoch 762, RMSE: 0.8057522, validation RMSE: 11.373401\n",
            "Epoch 763, RMSE: 0.8051341, validation RMSE: 11.364684\n",
            "Epoch 764, RMSE: 0.8045225, validation RMSE: 11.356115\n",
            "Epoch 765, RMSE: 0.8039199, validation RMSE: 11.347757\n",
            "Epoch 766, RMSE: 0.80333835, validation RMSE: 11.339607\n",
            "Epoch 767, RMSE: 0.802765, validation RMSE: 11.331467\n",
            "Epoch 768, RMSE: 0.80219793, validation RMSE: 11.323531\n",
            "Epoch 769, RMSE: 0.80163723, validation RMSE: 11.315733\n",
            "Epoch 770, RMSE: 0.80108285, validation RMSE: 11.307849\n",
            "Epoch 771, RMSE: 0.80054116, validation RMSE: 11.3003845\n",
            "Epoch 772, RMSE: 0.8000204, validation RMSE: 11.293115\n",
            "Epoch 773, RMSE: 0.7995058, validation RMSE: 11.285789\n",
            "Epoch 774, RMSE: 0.7989961, validation RMSE: 11.278653\n",
            "Epoch 775, RMSE: 0.79849976, validation RMSE: 11.271857\n",
            "Epoch 776, RMSE: 0.79801744, validation RMSE: 11.264944\n",
            "Epoch 777, RMSE: 0.79753304, validation RMSE: 11.258126\n",
            "Epoch 778, RMSE: 0.7970588, validation RMSE: 11.25155\n",
            "Epoch 779, RMSE: 0.7966068, validation RMSE: 11.245268\n",
            "Epoch 780, RMSE: 0.7961592, validation RMSE: 11.238986\n",
            "Epoch 781, RMSE: 0.79571813, validation RMSE: 11.232734\n",
            "Epoch 782, RMSE: 0.79527426, validation RMSE: 11.226459\n",
            "Epoch 783, RMSE: 0.79484195, validation RMSE: 11.220467\n",
            "Epoch 784, RMSE: 0.79442596, validation RMSE: 11.214726\n",
            "Epoch 785, RMSE: 0.794017, validation RMSE: 11.208876\n",
            "Epoch 786, RMSE: 0.7936127, validation RMSE: 11.203325\n",
            "Epoch 787, RMSE: 0.7932179, validation RMSE: 11.19772\n",
            "Epoch 788, RMSE: 0.792832, validation RMSE: 11.192382\n",
            "Epoch 789, RMSE: 0.7924555, validation RMSE: 11.187016\n",
            "Epoch 790, RMSE: 0.7920829, validation RMSE: 11.181753\n",
            "Epoch 791, RMSE: 0.7917094, validation RMSE: 11.176567\n",
            "Epoch 792, RMSE: 0.7913449, validation RMSE: 11.17156\n",
            "Epoch 793, RMSE: 0.7909992, validation RMSE: 11.166677\n",
            "Epoch 794, RMSE: 0.7906535, validation RMSE: 11.161791\n",
            "Epoch 795, RMSE: 0.79031265, validation RMSE: 11.157126\n",
            "Epoch 796, RMSE: 0.78998744, validation RMSE: 11.152481\n",
            "Epoch 797, RMSE: 0.78966236, validation RMSE: 11.1478815\n",
            "Epoch 798, RMSE: 0.78933656, validation RMSE: 11.143302\n",
            "Epoch 799, RMSE: 0.789021, validation RMSE: 11.138984\n",
            "Epoch 800, RMSE: 0.78871596, validation RMSE: 11.134684\n",
            "Epoch 801, RMSE: 0.78841513, validation RMSE: 11.1304245\n",
            "Epoch 802, RMSE: 0.78812015, validation RMSE: 11.126394\n",
            "Epoch 803, RMSE: 0.787841, validation RMSE: 11.122448\n",
            "Epoch 804, RMSE: 0.7875578, validation RMSE: 11.118448\n",
            "Epoch 805, RMSE: 0.7872823, validation RMSE: 11.114668\n",
            "Epoch 806, RMSE: 0.7870194, validation RMSE: 11.1109915\n",
            "Epoch 807, RMSE: 0.7867596, validation RMSE: 11.1073265\n",
            "Epoch 808, RMSE: 0.7864978, validation RMSE: 11.103631\n",
            "Epoch 809, RMSE: 0.78624177, validation RMSE: 11.100058\n",
            "Epoch 810, RMSE: 0.78599125, validation RMSE: 11.096541\n",
            "Epoch 811, RMSE: 0.7857428, validation RMSE: 11.093039\n",
            "Epoch 812, RMSE: 0.785501, validation RMSE: 11.089675\n",
            "Epoch 813, RMSE: 0.78526115, validation RMSE: 11.086303\n",
            "Epoch 814, RMSE: 0.7850229, validation RMSE: 11.082985\n",
            "Epoch 815, RMSE: 0.78479385, validation RMSE: 11.079782\n",
            "Epoch 816, RMSE: 0.7845742, validation RMSE: 11.076773\n",
            "Epoch 817, RMSE: 0.7843628, validation RMSE: 11.073772\n",
            "Epoch 818, RMSE: 0.7841516, validation RMSE: 11.0708\n",
            "Epoch 819, RMSE: 0.7839425, validation RMSE: 11.067798\n",
            "Epoch 820, RMSE: 0.7837341, validation RMSE: 11.064942\n",
            "Epoch 821, RMSE: 0.7835319, validation RMSE: 11.062192\n",
            "Epoch 822, RMSE: 0.78333944, validation RMSE: 11.05943\n",
            "Epoch 823, RMSE: 0.78314686, validation RMSE: 11.056695\n",
            "Epoch 824, RMSE: 0.7829529, validation RMSE: 11.054042\n",
            "Epoch 825, RMSE: 0.78276753, validation RMSE: 11.051416\n",
            "Epoch 826, RMSE: 0.782581, validation RMSE: 11.048816\n",
            "Epoch 827, RMSE: 0.7823994, validation RMSE: 11.04626\n",
            "Epoch 828, RMSE: 0.782219, validation RMSE: 11.043711\n",
            "Epoch 829, RMSE: 0.7820457, validation RMSE: 11.041349\n",
            "Epoch 830, RMSE: 0.7818814, validation RMSE: 11.039027\n",
            "Epoch 831, RMSE: 0.7817134, validation RMSE: 11.03664\n",
            "Epoch 832, RMSE: 0.78154874, validation RMSE: 11.03433\n",
            "Epoch 833, RMSE: 0.78138447, validation RMSE: 11.032008\n",
            "Epoch 834, RMSE: 0.781224, validation RMSE: 11.029813\n",
            "Epoch 835, RMSE: 0.7810698, validation RMSE: 11.027604\n",
            "Epoch 836, RMSE: 0.7809146, validation RMSE: 11.02547\n",
            "Epoch 837, RMSE: 0.78076243, validation RMSE: 11.023322\n",
            "Epoch 838, RMSE: 0.7806167, validation RMSE: 11.021312\n",
            "Epoch 839, RMSE: 0.7804742, validation RMSE: 11.019321\n",
            "Epoch 840, RMSE: 0.7803373, validation RMSE: 11.017415\n",
            "Epoch 841, RMSE: 0.7802026, validation RMSE: 11.015543\n",
            "Epoch 842, RMSE: 0.7800697, validation RMSE: 11.013674\n",
            "Epoch 843, RMSE: 0.779939, validation RMSE: 11.0118065\n",
            "Epoch 844, RMSE: 0.7798099, validation RMSE: 11.010021\n",
            "Epoch 845, RMSE: 0.7796847, validation RMSE: 11.008299\n",
            "Epoch 846, RMSE: 0.7795611, validation RMSE: 11.006517\n",
            "Epoch 847, RMSE: 0.77943945, validation RMSE: 11.004845\n",
            "Epoch 848, RMSE: 0.77932096, validation RMSE: 11.003172\n",
            "Epoch 849, RMSE: 0.7792047, validation RMSE: 11.001561\n",
            "Epoch 850, RMSE: 0.77909124, validation RMSE: 10.999981\n",
            "Epoch 851, RMSE: 0.77898103, validation RMSE: 10.998445\n",
            "Epoch 852, RMSE: 0.7788777, validation RMSE: 10.996967\n",
            "Epoch 853, RMSE: 0.77876794, validation RMSE: 10.995446\n",
            "Epoch 854, RMSE: 0.77866006, validation RMSE: 10.993927\n",
            "Epoch 855, RMSE: 0.7785551, validation RMSE: 10.992437\n",
            "Epoch 856, RMSE: 0.7784502, validation RMSE: 10.990977\n",
            "Epoch 857, RMSE: 0.7783502, validation RMSE: 10.989613\n",
            "Epoch 858, RMSE: 0.77825654, validation RMSE: 10.988342\n",
            "Epoch 859, RMSE: 0.7781621, validation RMSE: 10.987004\n",
            "Epoch 860, RMSE: 0.7780715, validation RMSE: 10.985679\n",
            "Epoch 861, RMSE: 0.77797985, validation RMSE: 10.984446\n",
            "Epoch 862, RMSE: 0.77789056, validation RMSE: 10.983186\n",
            "Epoch 863, RMSE: 0.7778035, validation RMSE: 10.981964\n",
            "Epoch 864, RMSE: 0.77771693, validation RMSE: 10.9807415\n",
            "Epoch 865, RMSE: 0.77763355, validation RMSE: 10.979607\n",
            "Epoch 866, RMSE: 0.77755463, validation RMSE: 10.978519\n",
            "Epoch 867, RMSE: 0.77747464, validation RMSE: 10.977369\n",
            "Epoch 868, RMSE: 0.777395, validation RMSE: 10.976231\n",
            "Epoch 869, RMSE: 0.7773154, validation RMSE: 10.97514\n",
            "Epoch 870, RMSE: 0.7772395, validation RMSE: 10.974084\n",
            "Epoch 871, RMSE: 0.7771624, validation RMSE: 10.972991\n",
            "Epoch 872, RMSE: 0.7770894, validation RMSE: 10.971991\n"
          ]
        }
      ],
      "source": [
        "net_8 = build_model_8()\n",
        "train_RMSE_8, val_RMSE_8 = train_model_5(net_8,\n",
        "                                       train_x = x_to_train,\n",
        "                                       train_y = y_to_train,\n",
        "                                       val_x = x_val,\n",
        "                                       val_y = y_val,\n",
        "                                       batch_size = BATCH_SIZE,\n",
        "                                       wd = 0.05,\n",
        "                                       lr = 1e-4,\n",
        "                                       tol = 0.01,\n",
        "                                       train_num = 10000,\n",
        "                                       compare = 10)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "zFHmGb9Te_A2",
        "outputId": "fedcebbe-7e59-4074-b89b-78d5c03cb9ef"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "plot_RMSE(train_RMSE_8, \"train\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "LxodbcOje_A3",
        "outputId": "58f8f4f9-e4aa-4237-db9b-5080acb15dc8"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "plot_RMSE(val_RMSE_8, \"val\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Bn4tWM7_e_A3",
        "outputId": "ce241b11-ccdd-417b-8c3a-801f749daec5"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([1997.3145, 1997.3145, 1997.3145, ..., 1997.3145, 1997.3145,\n",
              "       1997.3145])"
            ]
          },
          "execution_count": 386,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Make prediction\n",
        "pre_8 = (net_8(x_test_std)).reshape(-1,)\n",
        "pre_8"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "UvqiLsnKe_A4",
        "outputId": "2d7bcecd-8fc4-4955-db47-9fd7036d77c0"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "RMSE =  10.916017\n"
          ]
        }
      ],
      "source": [
        "# Calculate RMSE\n",
        "RMSE_8 = RMSE(pre_8, y_test)\n",
        "print(\"RMSE = \", RMSE_8)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1Rd5kCCAe_A4"
      },
      "source": [
        "#### Case 9: MLP_2_ykeep_dropout\n",
        "- original y\n",
        "- #of obs.: 10,000\n",
        "- two hidden layers + ReLU\n",
        "- regulization: Fropout (rate = 0.5)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "H_cD2RNae_A5"
      },
      "outputs": [],
      "source": [
        "def build_model_9():\n",
        "    net = nn.Sequential()\n",
        "    net.add(nn.Dense(num_hidden, activation = 'relu'),\n",
        "            nn.Dropout(0.5),\n",
        "            nn.Dense(num_hidden, activation = 'relu'),\n",
        "            nn.Dropout(0.5),\n",
        "            nn.Dense(1))\n",
        "    print(net)  # display the model\n",
        "    net.initialize(init.Normal(sigma=0.01))\n",
        "    return net"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "q0oQpWr9e_A5",
        "outputId": "b3d5485e-566b-44b7-f043-76f09074bc51"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Sequential(\n",
            "  (0): Dense(-1 -> 45, Activation(relu))\n",
            "  (1): Dropout(p = 0.5, axes=())\n",
            "  (2): Dense(-1 -> 45, Activation(relu))\n",
            "  (3): Dropout(p = 0.5, axes=())\n",
            "  (4): Dense(-1 -> 1, linear)\n",
            ")\n",
            "Epoch 1, RMSE: 141.2379, validation RMSE: 1996.375\n",
            "Epoch 2, RMSE: 141.07278, validation RMSE: 1992.9111\n",
            "Epoch 3, RMSE: 110.7575, validation RMSE: 328.8677\n",
            "Epoch 4, RMSE: 48.74553, validation RMSE: 379.83188\n",
            "Epoch 5, RMSE: 43.578854, validation RMSE: 221.54437\n",
            "Epoch 6, RMSE: 39.427155, validation RMSE: 216.14319\n",
            "Epoch 7, RMSE: 36.961006, validation RMSE: 199.0477\n",
            "Epoch 8, RMSE: 34.971203, validation RMSE: 154.8551\n",
            "Epoch 9, RMSE: 34.48789, validation RMSE: 132.40376\n",
            "Epoch 10, RMSE: 32.61991, validation RMSE: 117.92172\n",
            "Epoch 11, RMSE: 32.23062, validation RMSE: 129.8141\n",
            "Epoch 12, RMSE: 32.039215, validation RMSE: 99.56938\n",
            "Epoch 13, RMSE: 31.398182, validation RMSE: 139.77095\n",
            "Epoch 14, RMSE: 31.509222, validation RMSE: 107.69647\n",
            "Epoch 15, RMSE: 30.777178, validation RMSE: 118.77087\n",
            "Epoch 16, RMSE: 30.634958, validation RMSE: 95.48086\n",
            "Epoch 17, RMSE: 30.321507, validation RMSE: 159.37915\n",
            "Epoch 18, RMSE: 30.568174, validation RMSE: 152.29192\n",
            "Epoch 19, RMSE: 30.641535, validation RMSE: 102.90724\n",
            "Epoch 20, RMSE: 30.040369, validation RMSE: 127.31042\n",
            "Epoch 21, RMSE: 29.994287, validation RMSE: 127.30031\n",
            "Epoch 22, RMSE: 30.238504, validation RMSE: 67.119995\n",
            "Epoch 23, RMSE: 30.52645, validation RMSE: 154.14087\n",
            "Epoch 24, RMSE: 30.4955, validation RMSE: 281.38855\n",
            "Epoch 25, RMSE: 30.040565, validation RMSE: 105.01407\n",
            "Epoch 26, RMSE: 30.041162, validation RMSE: 71.77224\n",
            "Epoch 27, RMSE: 30.113075, validation RMSE: 101.713875\n",
            "Epoch 28, RMSE: 29.81895, validation RMSE: 82.72025\n",
            "Epoch 29, RMSE: 30.244024, validation RMSE: 105.407814\n",
            "Epoch 30, RMSE: 29.45035, validation RMSE: 66.05661\n",
            "Epoch 31, RMSE: 29.981962, validation RMSE: 116.78756\n",
            "Epoch 32, RMSE: 30.012785, validation RMSE: 82.61677\n",
            "Epoch 33, RMSE: 29.866713, validation RMSE: 154.47667\n",
            "Epoch 34, RMSE: 29.54033, validation RMSE: 78.51544\n",
            "Epoch 35, RMSE: 29.68267, validation RMSE: 98.60643\n",
            "Epoch 36, RMSE: 29.54167, validation RMSE: 118.69309\n",
            "Epoch 37, RMSE: 29.8994, validation RMSE: 312.68497\n",
            "Epoch 38, RMSE: 29.968666, validation RMSE: 176.08565\n",
            "Epoch 39, RMSE: 29.353207, validation RMSE: 208.99753\n",
            "Epoch 40, RMSE: 29.50621, validation RMSE: 92.131676\n",
            "Epoch 41, RMSE: 29.084959, validation RMSE: 56.174816\n",
            "Epoch 42, RMSE: 29.007582, validation RMSE: 186.62204\n",
            "Epoch 43, RMSE: 30.072504, validation RMSE: 86.491\n",
            "Epoch 44, RMSE: 29.863543, validation RMSE: 59.635853\n",
            "Epoch 45, RMSE: 30.582745, validation RMSE: 241.61269\n",
            "Epoch 46, RMSE: 30.441252, validation RMSE: 221.19414\n",
            "Epoch 47, RMSE: 30.139423, validation RMSE: 85.56767\n",
            "Epoch 48, RMSE: 29.181053, validation RMSE: 215.2201\n",
            "Epoch 49, RMSE: 28.82693, validation RMSE: 165.45547\n",
            "Epoch 50, RMSE: 28.890793, validation RMSE: 203.99593\n",
            "Epoch 51, RMSE: 28.240534, validation RMSE: 102.79305\n",
            "Epoch 52, RMSE: 28.66638, validation RMSE: 122.427284\n",
            "Epoch 53, RMSE: 28.733372, validation RMSE: 73.82774\n",
            "Epoch 54, RMSE: 28.078806, validation RMSE: 180.56569\n",
            "Epoch 55, RMSE: 28.481976, validation RMSE: 67.45617\n",
            "Epoch 56, RMSE: 28.421267, validation RMSE: 145.18501\n",
            "Epoch 57, RMSE: 27.629366, validation RMSE: 247.49988\n",
            "Epoch 58, RMSE: 27.171131, validation RMSE: 87.29995\n",
            "Epoch 59, RMSE: 28.645676, validation RMSE: 78.91521\n",
            "Epoch 60, RMSE: 27.89711, validation RMSE: 65.38314\n",
            "Epoch 61, RMSE: 27.018654, validation RMSE: 156.04108\n",
            "Epoch 62, RMSE: 27.374832, validation RMSE: 109.27389\n",
            "Epoch 63, RMSE: 26.882452, validation RMSE: 51.23935\n",
            "Epoch 64, RMSE: 26.480696, validation RMSE: 157.86005\n",
            "Epoch 65, RMSE: 27.331007, validation RMSE: 158.81715\n",
            "Epoch 66, RMSE: 26.357332, validation RMSE: 177.24174\n",
            "Epoch 67, RMSE: 26.120993, validation RMSE: 68.99415\n",
            "Epoch 68, RMSE: 25.191908, validation RMSE: 87.36724\n",
            "Epoch 69, RMSE: 26.032719, validation RMSE: 62.588005\n",
            "Epoch 70, RMSE: 25.28355, validation RMSE: 70.330666\n",
            "Epoch 71, RMSE: 25.08987, validation RMSE: 84.098076\n",
            "Epoch 72, RMSE: 25.6276, validation RMSE: 54.97676\n",
            "Epoch 73, RMSE: 24.794237, validation RMSE: 55.18795\n",
            "Epoch 74, RMSE: 24.811712, validation RMSE: 181.18767\n",
            "Epoch 75, RMSE: 24.321407, validation RMSE: 85.15267\n",
            "Epoch 76, RMSE: 24.426144, validation RMSE: 166.19644\n",
            "Epoch 77, RMSE: 23.811916, validation RMSE: 167.23834\n",
            "Epoch 78, RMSE: 24.059307, validation RMSE: 56.853245\n",
            "Epoch 79, RMSE: 23.700674, validation RMSE: 85.82583\n",
            "Epoch 80, RMSE: 23.71259, validation RMSE: 52.1116\n",
            "Epoch 81, RMSE: 23.262842, validation RMSE: 59.803856\n",
            "Epoch 82, RMSE: 23.177454, validation RMSE: 87.67681\n",
            "Epoch 83, RMSE: 22.909101, validation RMSE: 40.87919\n",
            "Epoch 84, RMSE: 22.54071, validation RMSE: 103.00044\n",
            "Epoch 85, RMSE: 22.69396, validation RMSE: 47.930126\n",
            "Epoch 86, RMSE: 22.457693, validation RMSE: 124.21941\n",
            "Epoch 87, RMSE: 22.372478, validation RMSE: 49.019127\n",
            "Epoch 88, RMSE: 22.853472, validation RMSE: 36.026752\n",
            "Epoch 89, RMSE: 22.058907, validation RMSE: 98.644745\n",
            "Epoch 90, RMSE: 22.314861, validation RMSE: 87.368546\n",
            "Epoch 91, RMSE: 22.102589, validation RMSE: 66.60653\n",
            "Epoch 92, RMSE: 22.054148, validation RMSE: 33.984196\n",
            "Epoch 93, RMSE: 22.103172, validation RMSE: 98.62562\n",
            "Epoch 94, RMSE: 21.907587, validation RMSE: 45.117817\n",
            "Epoch 95, RMSE: 21.946527, validation RMSE: 66.63814\n",
            "Epoch 96, RMSE: 21.958902, validation RMSE: 26.433558\n",
            "Epoch 97, RMSE: 21.990463, validation RMSE: 62.039738\n",
            "Epoch 98, RMSE: 21.944357, validation RMSE: 39.409943\n",
            "Epoch 99, RMSE: 22.120985, validation RMSE: 20.756931\n",
            "Epoch 100, RMSE: 21.887938, validation RMSE: 39.984276\n",
            "Epoch 101, RMSE: 22.201283, validation RMSE: 23.117714\n",
            "Epoch 102, RMSE: 22.048859, validation RMSE: 61.65892\n",
            "Epoch 103, RMSE: 21.854408, validation RMSE: 34.54054\n",
            "Epoch 104, RMSE: 22.297228, validation RMSE: 57.564243\n",
            "Epoch 105, RMSE: 22.063923, validation RMSE: 68.5593\n",
            "Epoch 106, RMSE: 21.795761, validation RMSE: 119.43556\n",
            "Epoch 107, RMSE: 21.63051, validation RMSE: 64.849266\n",
            "Epoch 108, RMSE: 21.967009, validation RMSE: 83.88408\n",
            "Epoch 109, RMSE: 21.812346, validation RMSE: 41.627094\n",
            "Epoch 110, RMSE: 22.07507, validation RMSE: 76.57437\n",
            "Epoch 111, RMSE: 21.736122, validation RMSE: 45.235706\n",
            "Epoch 112, RMSE: 21.905281, validation RMSE: 76.7444\n",
            "Epoch 113, RMSE: 21.905653, validation RMSE: 72.43243\n",
            "Epoch 114, RMSE: 21.73486, validation RMSE: 29.01392\n",
            "Epoch 115, RMSE: 21.643093, validation RMSE: 39.640667\n",
            "Epoch 116, RMSE: 22.120108, validation RMSE: 59.98717\n",
            "Epoch 117, RMSE: 21.837128, validation RMSE: 47.842766\n",
            "Epoch 118, RMSE: 21.84235, validation RMSE: 40.98809\n",
            "Epoch 119, RMSE: 21.764383, validation RMSE: 20.450266\n",
            "Epoch 120, RMSE: 21.835886, validation RMSE: 35.359535\n",
            "Epoch 121, RMSE: 21.95435, validation RMSE: 22.573595\n",
            "Epoch 122, RMSE: 21.639526, validation RMSE: 34.47999\n",
            "Epoch 123, RMSE: 21.678902, validation RMSE: 43.208397\n",
            "Epoch 124, RMSE: 21.738535, validation RMSE: 59.292763\n",
            "Epoch 125, RMSE: 21.690968, validation RMSE: 54.69734\n",
            "Epoch 126, RMSE: 21.569248, validation RMSE: 61.527077\n",
            "Epoch 127, RMSE: 22.04673, validation RMSE: 39.051342\n",
            "Epoch 128, RMSE: 22.004326, validation RMSE: 60.190125\n",
            "Epoch 129, RMSE: 21.71408, validation RMSE: 73.48407\n",
            "Epoch 130, RMSE: 21.641912, validation RMSE: 55.431335\n",
            "Epoch 131, RMSE: 22.024023, validation RMSE: 56.33926\n",
            "Epoch 132, RMSE: 21.651882, validation RMSE: 64.84888\n",
            "Epoch 133, RMSE: 22.044113, validation RMSE: 49.8295\n",
            "Epoch 134, RMSE: 21.920492, validation RMSE: 55.766926\n",
            "Epoch 135, RMSE: 21.74247, validation RMSE: 51.887615\n",
            "Epoch 136, RMSE: 21.586464, validation RMSE: 68.65145\n",
            "Epoch 137, RMSE: 21.408628, validation RMSE: 64.53759\n",
            "Epoch 138, RMSE: 21.78435, validation RMSE: 36.96041\n",
            "Epoch 139, RMSE: 21.675478, validation RMSE: 55.073505\n",
            "Epoch 140, RMSE: 21.849823, validation RMSE: 31.400833\n",
            "Epoch 141, RMSE: 21.445154, validation RMSE: 89.81388\n",
            "Epoch 142, RMSE: 21.844484, validation RMSE: 31.19971\n",
            "Epoch 143, RMSE: 21.539713, validation RMSE: 72.377045\n",
            "Epoch 144, RMSE: 21.520615, validation RMSE: 68.68575\n",
            "Epoch 145, RMSE: 21.539001, validation RMSE: 35.091846\n",
            "Epoch 146, RMSE: 21.73748, validation RMSE: 53.307884\n",
            "Epoch 147, RMSE: 21.714298, validation RMSE: 44.51382\n",
            "Epoch 148, RMSE: 21.562317, validation RMSE: 52.487995\n",
            "Epoch 149, RMSE: 21.61557, validation RMSE: 48.9209\n",
            "Epoch 150, RMSE: 21.745878, validation RMSE: 55.546093\n",
            "Epoch 151, RMSE: 21.373596, validation RMSE: 32.802372\n",
            "Epoch 152, RMSE: 21.531784, validation RMSE: 52.42256\n",
            "Epoch 153, RMSE: 21.381212, validation RMSE: 76.3119\n",
            "Epoch 154, RMSE: 21.577574, validation RMSE: 63.217293\n",
            "Epoch 155, RMSE: 21.61017, validation RMSE: 48.086002\n",
            "Epoch 156, RMSE: 21.615059, validation RMSE: 29.83917\n",
            "Epoch 157, RMSE: 21.33485, validation RMSE: 44.19477\n",
            "Epoch 158, RMSE: 21.920057, validation RMSE: 45.614384\n",
            "Epoch 159, RMSE: 21.518091, validation RMSE: 49.90869\n",
            "Epoch 160, RMSE: 21.53849, validation RMSE: 53.65171\n",
            "Epoch 161, RMSE: 21.57029, validation RMSE: 69.86442\n",
            "Epoch 162, RMSE: 21.830647, validation RMSE: 59.871735\n",
            "Epoch 163, RMSE: 21.727201, validation RMSE: 34.05057\n",
            "Epoch 164, RMSE: 21.59269, validation RMSE: 86.542496\n",
            "Epoch 165, RMSE: 21.60386, validation RMSE: 43.033485\n",
            "Epoch 166, RMSE: 21.52766, validation RMSE: 51.072395\n",
            "Epoch 167, RMSE: 21.814203, validation RMSE: 33.04243\n",
            "Epoch 168, RMSE: 21.736298, validation RMSE: 67.09336\n",
            "Epoch 169, RMSE: 21.548496, validation RMSE: 51.625454\n",
            "Epoch 170, RMSE: 21.84439, validation RMSE: 47.093307\n",
            "Epoch 171, RMSE: 21.761318, validation RMSE: 44.436855\n",
            "Epoch 172, RMSE: 21.488043, validation RMSE: 71.810844\n",
            "Epoch 173, RMSE: 21.740494, validation RMSE: 42.219204\n",
            "Epoch 174, RMSE: 21.694536, validation RMSE: 48.8295\n",
            "Epoch 175, RMSE: 21.516006, validation RMSE: 49.652534\n",
            "Epoch 176, RMSE: 21.75524, validation RMSE: 49.098656\n",
            "Epoch 177, RMSE: 21.709303, validation RMSE: 37.329006\n",
            "Epoch 178, RMSE: 21.788635, validation RMSE: 31.21858\n",
            "Epoch 179, RMSE: 21.90903, validation RMSE: 40.626232\n",
            "Epoch 180, RMSE: 21.646671, validation RMSE: 59.160473\n",
            "Epoch 181, RMSE: 21.56016, validation RMSE: 45.102253\n",
            "Epoch 182, RMSE: 21.428865, validation RMSE: 34.098206\n",
            "Epoch 183, RMSE: 21.56341, validation RMSE: 44.921375\n",
            "Epoch 184, RMSE: 21.592901, validation RMSE: 33.832973\n",
            "Epoch 185, RMSE: 21.479006, validation RMSE: 48.47699\n",
            "Epoch 186, RMSE: 21.526443, validation RMSE: 43.83855\n",
            "Epoch 187, RMSE: 21.37231, validation RMSE: 38.628864\n",
            "Epoch 188, RMSE: 21.55436, validation RMSE: 39.548817\n",
            "Epoch 189, RMSE: 21.548735, validation RMSE: 56.277004\n",
            "Epoch 190, RMSE: 21.513332, validation RMSE: 60.710857\n",
            "Epoch 191, RMSE: 21.459948, validation RMSE: 32.547127\n",
            "Epoch 192, RMSE: 21.604145, validation RMSE: 52.402206\n",
            "Epoch 193, RMSE: 21.489737, validation RMSE: 34.08055\n",
            "Epoch 194, RMSE: 21.502886, validation RMSE: 49.437916\n",
            "Epoch 195, RMSE: 21.562206, validation RMSE: 46.660065\n",
            "Epoch 196, RMSE: 21.7459, validation RMSE: 60.05631\n",
            "Epoch 197, RMSE: 21.668537, validation RMSE: 34.992912\n",
            "Epoch 198, RMSE: 21.49051, validation RMSE: 46.167435\n",
            "Epoch 199, RMSE: 21.415176, validation RMSE: 55.90715\n",
            "Epoch 200, RMSE: 21.487139, validation RMSE: 69.83679\n",
            "Epoch 201, RMSE: 21.387247, validation RMSE: 57.367542\n",
            "Epoch 202, RMSE: 21.536118, validation RMSE: 41.39094\n",
            "Epoch 203, RMSE: 21.86081, validation RMSE: 33.944607\n",
            "Epoch 204, RMSE: 21.59399, validation RMSE: 40.668858\n",
            "Epoch 205, RMSE: 21.81639, validation RMSE: 52.60078\n",
            "Epoch 206, RMSE: 21.68505, validation RMSE: 49.66611\n",
            "Epoch 207, RMSE: 21.544703, validation RMSE: 53.296963\n",
            "Epoch 208, RMSE: 21.823332, validation RMSE: 34.963768\n",
            "Epoch 209, RMSE: 21.569187, validation RMSE: 69.63257\n",
            "Epoch 210, RMSE: 21.690027, validation RMSE: 36.710472\n",
            "Epoch 211, RMSE: 21.562199, validation RMSE: 49.304028\n",
            "Epoch 212, RMSE: 21.506748, validation RMSE: 46.345383\n",
            "Epoch 213, RMSE: 21.534472, validation RMSE: 50.532734\n",
            "Epoch 214, RMSE: 21.717312, validation RMSE: 34.944393\n",
            "Epoch 215, RMSE: 21.87256, validation RMSE: 30.846113\n",
            "Epoch 216, RMSE: 21.246725, validation RMSE: 33.819633\n",
            "Epoch 217, RMSE: 21.514938, validation RMSE: 65.34312\n",
            "Epoch 218, RMSE: 21.154034, validation RMSE: 46.674217\n",
            "Epoch 219, RMSE: 21.571224, validation RMSE: 35.033463\n",
            "Epoch 220, RMSE: 21.467117, validation RMSE: 49.962795\n",
            "Epoch 221, RMSE: 21.79502, validation RMSE: 27.832134\n",
            "Epoch 222, RMSE: 21.459166, validation RMSE: 41.816383\n",
            "Epoch 223, RMSE: 21.612858, validation RMSE: 58.591824\n",
            "Epoch 224, RMSE: 21.72043, validation RMSE: 32.508495\n",
            "Epoch 225, RMSE: 21.6594, validation RMSE: 40.620564\n",
            "Epoch 226, RMSE: 21.656303, validation RMSE: 54.99986\n",
            "Epoch 227, RMSE: 21.433056, validation RMSE: 57.56239\n",
            "Epoch 228, RMSE: 21.190258, validation RMSE: 57.647396\n",
            "Epoch 229, RMSE: 21.460506, validation RMSE: 38.770077\n",
            "Epoch 230, RMSE: 21.24489, validation RMSE: 61.43082\n",
            "Epoch 231, RMSE: 21.794376, validation RMSE: 60.83516\n",
            "Epoch 232, RMSE: 21.292645, validation RMSE: 49.53382\n",
            "Epoch 233, RMSE: 21.499514, validation RMSE: 47.436943\n",
            "Epoch 234, RMSE: 21.362585, validation RMSE: 32.844257\n",
            "Epoch 235, RMSE: 21.519283, validation RMSE: 49.923496\n",
            "Epoch 236, RMSE: 21.595787, validation RMSE: 57.706257\n",
            "Epoch 237, RMSE: 21.438173, validation RMSE: 46.24618\n",
            "Epoch 238, RMSE: 21.43211, validation RMSE: 45.130997\n",
            "Epoch 239, RMSE: 21.425411, validation RMSE: 68.10173\n",
            "Epoch 240, RMSE: 21.149208, validation RMSE: 58.861435\n",
            "Epoch 241, RMSE: 21.519691, validation RMSE: 37.88283\n",
            "Epoch 242, RMSE: 21.462116, validation RMSE: 54.130028\n",
            "Epoch 243, RMSE: 21.539162, validation RMSE: 37.319466\n",
            "Epoch 244, RMSE: 21.309782, validation RMSE: 46.860027\n",
            "Epoch 245, RMSE: 21.68674, validation RMSE: 46.008442\n",
            "Epoch 246, RMSE: 21.576624, validation RMSE: 55.454872\n",
            "Epoch 247, RMSE: 21.699688, validation RMSE: 39.57637\n",
            "Epoch 248, RMSE: 21.490643, validation RMSE: 46.852837\n",
            "Epoch 249, RMSE: 21.663038, validation RMSE: 39.962402\n",
            "Epoch 250, RMSE: 21.756962, validation RMSE: 42.8455\n",
            "Epoch 251, RMSE: 21.58817, validation RMSE: 46.467484\n",
            "Epoch 252, RMSE: 21.71161, validation RMSE: 43.069065\n",
            "Epoch 253, RMSE: 21.485504, validation RMSE: 57.696316\n",
            "Epoch 254, RMSE: 21.245794, validation RMSE: 47.973034\n",
            "Epoch 255, RMSE: 21.264946, validation RMSE: 55.185165\n",
            "Epoch 256, RMSE: 21.535507, validation RMSE: 54.079212\n",
            "Epoch 257, RMSE: 21.477942, validation RMSE: 29.867521\n",
            "Epoch 258, RMSE: 21.505314, validation RMSE: 45.87008\n",
            "Epoch 259, RMSE: 21.802576, validation RMSE: 32.150604\n",
            "Epoch 260, RMSE: 21.60086, validation RMSE: 67.888535\n",
            "Epoch 261, RMSE: 21.698843, validation RMSE: 60.248466\n",
            "Epoch 262, RMSE: 21.551699, validation RMSE: 50.177567\n",
            "Epoch 263, RMSE: 21.640589, validation RMSE: 35.94773\n",
            "Epoch 264, RMSE: 21.442816, validation RMSE: 43.132133\n",
            "Epoch 265, RMSE: 21.329496, validation RMSE: 46.40142\n",
            "Epoch 266, RMSE: 21.556225, validation RMSE: 51.261696\n",
            "Epoch 267, RMSE: 21.68599, validation RMSE: 57.372105\n",
            "Epoch 268, RMSE: 21.25494, validation RMSE: 49.237164\n",
            "Epoch 269, RMSE: 21.571209, validation RMSE: 49.062874\n",
            "Epoch 270, RMSE: 21.366383, validation RMSE: 53.649498\n",
            "Epoch 271, RMSE: 21.582176, validation RMSE: 57.01696\n",
            "Epoch 272, RMSE: 21.172949, validation RMSE: 43.773376\n",
            "Epoch 273, RMSE: 21.546955, validation RMSE: 51.81307\n",
            "Epoch 274, RMSE: 21.481497, validation RMSE: 40.140396\n",
            "Epoch 275, RMSE: 21.56429, validation RMSE: 47.099716\n",
            "Epoch 276, RMSE: 21.334452, validation RMSE: 52.169777\n",
            "Epoch 277, RMSE: 21.35357, validation RMSE: 58.458584\n",
            "Epoch 278, RMSE: 21.382195, validation RMSE: 50.509167\n",
            "Epoch 279, RMSE: 21.267794, validation RMSE: 59.883488\n",
            "Epoch 280, RMSE: 21.265408, validation RMSE: 40.072193\n",
            "Epoch 281, RMSE: 21.177547, validation RMSE: 52.180687\n",
            "Epoch 282, RMSE: 21.639805, validation RMSE: 34.983795\n",
            "Epoch 283, RMSE: 21.29689, validation RMSE: 59.503567\n",
            "Epoch 284, RMSE: 21.099276, validation RMSE: 59.389393\n",
            "Epoch 285, RMSE: 21.479542, validation RMSE: 64.6879\n",
            "Epoch 286, RMSE: 21.472849, validation RMSE: 37.857727\n",
            "Epoch 287, RMSE: 21.39306, validation RMSE: 42.016018\n",
            "Epoch 288, RMSE: 21.391066, validation RMSE: 46.19677\n",
            "Epoch 289, RMSE: 21.542994, validation RMSE: 46.97095\n",
            "Epoch 290, RMSE: 21.634481, validation RMSE: 50.585327\n",
            "Epoch 291, RMSE: 21.606611, validation RMSE: 33.48285\n",
            "Epoch 292, RMSE: 21.467125, validation RMSE: 50.391216\n",
            "Epoch 293, RMSE: 21.427216, validation RMSE: 54.81153\n",
            "Epoch 294, RMSE: 21.343561, validation RMSE: 57.53792\n",
            "Epoch 295, RMSE: 21.369158, validation RMSE: 34.952198\n",
            "Epoch 296, RMSE: 21.693089, validation RMSE: 42.100105\n",
            "Epoch 297, RMSE: 21.259018, validation RMSE: 59.293358\n",
            "Epoch 298, RMSE: 21.404734, validation RMSE: 38.517185\n",
            "Epoch 299, RMSE: 21.361729, validation RMSE: 45.789143\n",
            "Epoch 300, RMSE: 21.499645, validation RMSE: 65.091515\n",
            "Epoch 301, RMSE: 21.566633, validation RMSE: 32.739967\n",
            "Epoch 302, RMSE: 21.482986, validation RMSE: 44.748352\n",
            "Epoch 303, RMSE: 21.2622, validation RMSE: 46.57604\n",
            "Epoch 304, RMSE: 21.15843, validation RMSE: 63.379055\n",
            "Epoch 305, RMSE: 21.461658, validation RMSE: 50.253864\n",
            "Epoch 306, RMSE: 21.661303, validation RMSE: 40.034164\n",
            "Epoch 307, RMSE: 21.590233, validation RMSE: 55.244114\n",
            "Epoch 308, RMSE: 21.342482, validation RMSE: 52.87162\n",
            "Epoch 309, RMSE: 21.422876, validation RMSE: 49.9518\n",
            "Epoch 310, RMSE: 21.04424, validation RMSE: 42.11969\n",
            "Epoch 311, RMSE: 21.183731, validation RMSE: 51.77986\n",
            "Epoch 312, RMSE: 21.319263, validation RMSE: 45.0884\n",
            "Epoch 313, RMSE: 21.553041, validation RMSE: 56.40206\n",
            "Epoch 314, RMSE: 21.375963, validation RMSE: 48.19813\n",
            "Epoch 315, RMSE: 21.505371, validation RMSE: 44.61124\n",
            "Epoch 316, RMSE: 21.352179, validation RMSE: 41.371395\n",
            "Epoch 317, RMSE: 21.427961, validation RMSE: 40.032475\n",
            "Epoch 318, RMSE: 21.396057, validation RMSE: 52.88585\n",
            "Epoch 319, RMSE: 21.482254, validation RMSE: 50.52606\n",
            "Epoch 320, RMSE: 21.420021, validation RMSE: 44.475834\n",
            "Epoch 321, RMSE: 21.610256, validation RMSE: 46.80986\n",
            "Epoch 322, RMSE: 21.48457, validation RMSE: 52.50226\n",
            "Epoch 323, RMSE: 21.490349, validation RMSE: 40.157093\n",
            "Epoch 324, RMSE: 21.22729, validation RMSE: 45.193245\n",
            "Epoch 325, RMSE: 21.252872, validation RMSE: 44.22965\n",
            "Epoch 326, RMSE: 21.477129, validation RMSE: 49.969078\n",
            "Epoch 327, RMSE: 21.366373, validation RMSE: 51.465164\n",
            "Epoch 328, RMSE: 21.068222, validation RMSE: 51.317574\n",
            "Epoch 329, RMSE: 21.465883, validation RMSE: 47.8571\n",
            "Epoch 330, RMSE: 21.19297, validation RMSE: 39.378445\n",
            "Epoch 331, RMSE: 21.393538, validation RMSE: 49.7326\n",
            "Epoch 332, RMSE: 21.159035, validation RMSE: 50.11209\n",
            "Epoch 333, RMSE: 21.460968, validation RMSE: 44.13531\n",
            "Epoch 334, RMSE: 21.353085, validation RMSE: 46.956547\n",
            "Epoch 335, RMSE: 21.552954, validation RMSE: 37.906975\n",
            "Epoch 336, RMSE: 21.485056, validation RMSE: 55.427704\n",
            "Epoch 337, RMSE: 21.468283, validation RMSE: 52.205414\n",
            "Epoch 338, RMSE: 21.239323, validation RMSE: 45.464046\n",
            "Epoch 339, RMSE: 21.273945, validation RMSE: 40.43364\n",
            "Epoch 340, RMSE: 21.316504, validation RMSE: 45.23503\n",
            "Epoch 341, RMSE: 21.207777, validation RMSE: 46.781395\n",
            "Epoch 342, RMSE: 21.266754, validation RMSE: 47.61503\n",
            "Epoch 343, RMSE: 21.429794, validation RMSE: 46.722\n",
            "Epoch 344, RMSE: 21.161331, validation RMSE: 39.89004\n",
            "Epoch 345, RMSE: 21.148571, validation RMSE: 44.969326\n",
            "Epoch 346, RMSE: 21.296852, validation RMSE: 35.69622\n",
            "Epoch 347, RMSE: 21.33026, validation RMSE: 38.14104\n"
          ]
        },
        {
          "ename": "KeyboardInterrupt",
          "evalue": "",
          "output_type": "error",
          "traceback": [
            "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[1;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[1;32m<ipython-input-444-9d4926862ca6>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m     10\u001b[0m                                        \u001b[0mtrain_num\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;36m10000\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     11\u001b[0m                                        \u001b[0mcompare_start\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;36m100\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 12\u001b[1;33m                                        compare = 10)\n\u001b[0m",
            "\u001b[1;32m<ipython-input-427-3ffbf375d7e4>\u001b[0m in \u001b[0;36mtrain_model\u001b[1;34m(net, train_x, train_y, val_x, val_y, batch_size, train_num, lr, epochs, compare_start, compare, tol)\u001b[0m\n\u001b[0;32m     10\u001b[0m         \u001b[0mcum_loss\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;36m0\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     11\u001b[0m         \u001b[0mi_list\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;33m[\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 12\u001b[1;33m         \u001b[1;32mfor\u001b[0m \u001b[0mi\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mlabel\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;32min\u001b[0m \u001b[0menumerate\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mtrain_iter\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     13\u001b[0m             \u001b[0mdata\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mdata\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mas_in_context\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mmodel_cpu\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     14\u001b[0m             \u001b[0mlabel\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mlabel\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mas_in_context\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mmodel_cpu\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
            "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\mxnet\\gluon\\data\\dataloader.py\u001b[0m in \u001b[0;36msame_process_iter\u001b[1;34m()\u001b[0m\n\u001b[0;32m    655\u001b[0m             \u001b[1;32mdef\u001b[0m \u001b[0msame_process_iter\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    656\u001b[0m                 \u001b[1;32mfor\u001b[0m \u001b[0mbatch\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_batch_sampler\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 657\u001b[1;33m                     \u001b[0mret\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_batchify_fn\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_dataset\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0midx\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;32mfor\u001b[0m \u001b[0midx\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mbatch\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    658\u001b[0m                     \u001b[1;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_pin_memory\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    659\u001b[0m                         \u001b[0mret\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0m_as_in_context\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mret\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mcontext\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcpu_pinned\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_pin_device_id\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
            "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\mxnet\\gluon\\data\\dataloader.py\u001b[0m in \u001b[0;36mdefault_batchify_fn\u001b[1;34m(data)\u001b[0m\n\u001b[0;32m    168\u001b[0m     \u001b[1;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mtuple\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    169\u001b[0m         \u001b[0mdata\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mzip\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m*\u001b[0m\u001b[0mdata\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 170\u001b[1;33m         \u001b[1;32mreturn\u001b[0m \u001b[1;33m[\u001b[0m\u001b[0mdefault_batchify_fn\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mi\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mdata\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    171\u001b[0m     \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    172\u001b[0m         \u001b[0mdata\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0masarray\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
            "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\mxnet\\gluon\\data\\dataloader.py\u001b[0m in \u001b[0;36m<listcomp>\u001b[1;34m(.0)\u001b[0m\n\u001b[0;32m    168\u001b[0m     \u001b[1;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mtuple\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    169\u001b[0m         \u001b[0mdata\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mzip\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m*\u001b[0m\u001b[0mdata\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 170\u001b[1;33m         \u001b[1;32mreturn\u001b[0m \u001b[1;33m[\u001b[0m\u001b[0mdefault_batchify_fn\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mi\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mdata\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    171\u001b[0m     \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    172\u001b[0m         \u001b[0mdata\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0masarray\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
            "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\mxnet\\gluon\\data\\dataloader.py\u001b[0m in \u001b[0;36mdefault_batchify_fn\u001b[1;34m(data)\u001b[0m\n\u001b[0;32m    165\u001b[0m     \u001b[1;34m\"\"\"Collate data into batch.\"\"\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    166\u001b[0m     \u001b[1;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mnd\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mNDArray\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 167\u001b[1;33m         \u001b[1;32mreturn\u001b[0m \u001b[0m_mx_np\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mstack\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;32mif\u001b[0m \u001b[0mis_np_array\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;32melse\u001b[0m \u001b[0mnd\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mstack\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m*\u001b[0m\u001b[0mdata\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    168\u001b[0m     \u001b[1;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mtuple\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    169\u001b[0m         \u001b[0mdata\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mzip\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m*\u001b[0m\u001b[0mdata\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
            "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\mxnet\\numpy\\multiarray.py\u001b[0m in \u001b[0;36mstack\u001b[1;34m(arrays, axis, out)\u001b[0m\n\u001b[0;32m   4976\u001b[0m            [3., 4.]])\n\u001b[0;32m   4977\u001b[0m     \"\"\"\n\u001b[1;32m-> 4978\u001b[1;33m     \u001b[1;32mreturn\u001b[0m \u001b[0m_mx_nd_np\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mstack\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0marrays\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mout\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mout\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   4979\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   4980\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
            "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\mxnet\\ndarray\\numpy\\_op.py\u001b[0m in \u001b[0;36mstack\u001b[1;34m(arrays, axis, out)\u001b[0m\n\u001b[0;32m   3078\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   3079\u001b[0m     \u001b[0marrays\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mget_list\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0marrays\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 3080\u001b[1;33m     \u001b[1;32mreturn\u001b[0m \u001b[0m_npi\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mstack\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m*\u001b[0m\u001b[0marrays\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mout\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mout\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   3081\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   3082\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
            "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\mxnet\\ndarray\\register.py\u001b[0m in \u001b[0;36mstack\u001b[1;34m(*data, **kwargs)\u001b[0m\n",
            "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\mxnet\\_ctypes\\ndarray.py\u001b[0m in \u001b[0;36m_imperative_invoke\u001b[1;34m(handle, ndargs, keys, vals, out, is_np_op)\u001b[0m\n\u001b[0;32m    105\u001b[0m         \u001b[0mc_str_array\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mkeys\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    106\u001b[0m         \u001b[0mc_str_array\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mstr\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0ms\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;32mfor\u001b[0m \u001b[0ms\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mvals\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 107\u001b[1;33m         ctypes.byref(out_stypes)))\n\u001b[0m\u001b[0;32m    108\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    109\u001b[0m     \u001b[0mcreate_ndarray_fn\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0m_np_ndarray_cls\u001b[0m \u001b[1;32mif\u001b[0m \u001b[0mis_np_op\u001b[0m \u001b[1;32melse\u001b[0m \u001b[0m_ndarray_cls\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
            "\u001b[1;31mKeyboardInterrupt\u001b[0m: "
          ]
        }
      ],
      "source": [
        "net_9 = build_model_9()\n",
        "train_RMSE_9, val_RMSE_9 = train_model(net_9,\n",
        "                                       train_x = x_to_train,\n",
        "                                       train_y = y_to_train,\n",
        "                                       val_x = x_val,\n",
        "                                       val_y = y_val,\n",
        "                                       batch_size = BATCH_SIZE,\n",
        "                                       lr = 0.00001,\n",
        "                                       tol = 0.01,\n",
        "                                       train_num = 10000,\n",
        "                                       compare_start = 100,\n",
        "                                       compare = 10)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9oJqxtKCe_A6"
      },
      "source": [
        "Due to setting a small tol value and noticeable fluctuation in validation RMSE for this case, it could be difficult to meet the early stopping condition. However, at the same time, the validation RMSE has stabilized and is not decreasing further. Therefore, I manually stopped the training."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "VHxSJmcBe_A6",
        "outputId": "99c5121b-021e-4b72-f2c1-0721deedec1c"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "plot_RMSE(train_RMSE_9, \"train\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "kjjfCZXie_A7",
        "outputId": "dc48981c-ca4c-4c7e-8c1f-385229e24cde"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "plot_RMSE(val_RMSE_9, \"val\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "IkHAOgEbe_A7",
        "outputId": "eaf80419-f22c-4304-b875-198cc39734d9"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([1938.0035, 1944.3734, 1954.678 , ..., 1956.8295, 1955.0675,\n",
              "       1951.8018])"
            ]
          },
          "execution_count": 447,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Make prediction\n",
        "pre_9 = (net_9(x_test_std)).reshape(-1,)\n",
        "pre_9"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "9NDSp4Ure_A8",
        "outputId": "5c4e07cf-fa41-45f1-c92e-b1a1ad9f31ea"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "RMSE =  49.315056\n"
          ]
        }
      ],
      "source": [
        "# Calculate RMSE\n",
        "RMSE_9 = RMSE(pre_9, y_test)\n",
        "print(\"RMSE = \", RMSE_9)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ulyJU3sKe_A9"
      },
      "source": [
        "#### Case 10: MLP_2_dm_dropout_full\n",
        "- de-mean y\n",
        "- #of obs.: All\n",
        "- two hidden layers + ReLU\n",
        "- regulization: Dropout (rate = 0.5)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "_MZ748kie_A9"
      },
      "outputs": [],
      "source": [
        "def build_model_10():\n",
        "    net = nn.Sequential()\n",
        "    net.add(nn.Dense(num_hidden, activation = 'relu'),\n",
        "            nn.Dropout(0.5),\n",
        "            nn.Dense(num_hidden, activation = 'relu'),\n",
        "            nn.Dropout(0.5),\n",
        "            nn.Dense(1))\n",
        "    print(net)  # display the model\n",
        "    net.initialize(init.Normal(sigma=0.01))\n",
        "    return net"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "y9u-YdRCe_A-",
        "outputId": "ac6d1e8a-20b1-40ab-dda4-0e9b043f1420"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Sequential(\n",
            "  (0): Dense(-1 -> 45, Activation(relu))\n",
            "  (1): Dropout(p = 0.5, axes=())\n",
            "  (2): Dense(-1 -> 45, Activation(relu))\n",
            "  (3): Dropout(p = 0.5, axes=())\n",
            "  (4): Dense(-1 -> 1, linear)\n",
            ")\n",
            "Epoch 1, RMSE: 244.69168, validation RMSE: 108.82597\n",
            "Epoch 2, RMSE: 87.133865, validation RMSE: 94.66165\n",
            "Epoch 3, RMSE: 82.09177, validation RMSE: 64.99268\n",
            "Epoch 4, RMSE: 78.1378, validation RMSE: 109.67164\n",
            "Epoch 5, RMSE: 75.00376, validation RMSE: 84.89293\n",
            "Epoch 6, RMSE: 70.47835, validation RMSE: 66.85283\n",
            "Epoch 7, RMSE: 66.211525, validation RMSE: 40.57271\n",
            "Epoch 8, RMSE: 63.606197, validation RMSE: 52.782883\n",
            "Epoch 9, RMSE: 62.781784, validation RMSE: 34.745358\n",
            "Epoch 10, RMSE: 62.239826, validation RMSE: 45.73865\n",
            "Epoch 11, RMSE: 61.94651, validation RMSE: 33.953358\n",
            "Epoch 12, RMSE: 61.84987, validation RMSE: 43.903633\n",
            "Epoch 13, RMSE: 61.911358, validation RMSE: 44.609566\n",
            "Epoch 14, RMSE: 61.78172, validation RMSE: 52.33077\n",
            "Epoch 15, RMSE: 61.802986, validation RMSE: 38.763794\n",
            "Epoch 16, RMSE: 61.740955, validation RMSE: 37.24348\n",
            "Epoch 17, RMSE: 61.754597, validation RMSE: 56.63069\n",
            "Epoch 18, RMSE: 61.660545, validation RMSE: 31.842625\n",
            "Epoch 19, RMSE: 61.558483, validation RMSE: 48.582798\n",
            "Epoch 20, RMSE: 61.6518, validation RMSE: 55.093296\n",
            "Epoch 21, RMSE: 61.603336, validation RMSE: 51.292107\n",
            "Epoch 22, RMSE: 61.504894, validation RMSE: 54.470917\n",
            "Epoch 23, RMSE: 61.477634, validation RMSE: 50.255905\n",
            "Epoch 24, RMSE: 61.513115, validation RMSE: 39.178818\n",
            "Epoch 25, RMSE: 61.49586, validation RMSE: 46.08385\n",
            "Epoch 26, RMSE: 61.36611, validation RMSE: 36.598118\n",
            "Epoch 27, RMSE: 61.453392, validation RMSE: 46.825653\n",
            "Epoch 28, RMSE: 61.41777, validation RMSE: 37.927277\n",
            "Epoch 29, RMSE: 61.33636, validation RMSE: 51.015873\n",
            "Epoch 30, RMSE: 61.27658, validation RMSE: 39.186695\n",
            "Epoch 31, RMSE: 61.328434, validation RMSE: 39.302452\n",
            "Epoch 32, RMSE: 61.235035, validation RMSE: 54.389767\n",
            "Epoch 33, RMSE: 61.262905, validation RMSE: 44.188606\n",
            "Epoch 34, RMSE: 61.232986, validation RMSE: 39.375843\n",
            "Epoch 35, RMSE: 61.235558, validation RMSE: 49.895664\n",
            "Epoch 36, RMSE: 61.282253, validation RMSE: 46.586876\n",
            "Epoch 37, RMSE: 61.17813, validation RMSE: 51.422764\n",
            "Epoch 38, RMSE: 61.241104, validation RMSE: 46.371906\n",
            "Epoch 39, RMSE: 61.189247, validation RMSE: 43.640957\n",
            "Epoch 40, RMSE: 61.10533, validation RMSE: 39.73309\n",
            "Epoch 41, RMSE: 60.973328, validation RMSE: 44.20011\n",
            "Epoch 42, RMSE: 61.12696, validation RMSE: 51.93916\n",
            "Epoch 43, RMSE: 60.91941, validation RMSE: 43.11812\n",
            "Epoch 44, RMSE: 61.05867, validation RMSE: 59.102097\n",
            "Epoch 45, RMSE: 61.067734, validation RMSE: 52.121098\n",
            "Epoch 46, RMSE: 60.934948, validation RMSE: 42.322254\n",
            "Epoch 47, RMSE: 60.956882, validation RMSE: 40.14728\n",
            "Epoch 48, RMSE: 60.944443, validation RMSE: 43.943954\n",
            "Epoch 49, RMSE: 61.05228, validation RMSE: 51.91743\n",
            "Epoch 50, RMSE: 60.988026, validation RMSE: 53.700405\n"
          ]
        }
      ],
      "source": [
        "net_10 = build_model_10()\n",
        "train_RMSE_10, val_RMSE_10 = train_model(net_10,\n",
        "                                       train_x = x_sub_train,\n",
        "                                       train_y = y_sub_train,\n",
        "                                       val_x = x_val,\n",
        "                                       val_y = y_val,\n",
        "                                       batch_size = 500,\n",
        "                                       epochs = 50,\n",
        "                                       lr = 1e-5,\n",
        "                                       tol = 0.01,\n",
        "                                       train_num = 10000,\n",
        "                                       compare_start = 51)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Su8h9N0pe_A-"
      },
      "source": [
        "The convergence in this case is not prominent, and the speed is not fast. I set the learning rate (lr) to $10^{-5}$ and did not increase it because I tried setting it to $10^{-4}$, but after a few epochs, the RMSE started to have NaN values. Therefore, I think the current learning rate is more suitable."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "F9CJcwkNe_A_",
        "outputId": "8dea9c94-4960-4e55-9dfe-4837945c06b9"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "plot_RMSE(train_RMSE_10, \"train\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "LWMpV-f3e_A_",
        "outputId": "6e047d71-0e55-46a2-a938-80d2e61fe96f"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "plot_RMSE(val_RMSE_10, \"val\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "f-I9SHxIe_BA",
        "outputId": "af3ca810-3b89-42da-cce1-65979879fe0a"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([1944.964 , 1946.3131, 1948.673 , ..., 1941.4639, 1944.0284,\n",
              "       1945.2052])"
            ]
          },
          "execution_count": 436,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Make prediction\n",
        "pre_10 = (net_10(x_test_std)).reshape(-1,)\n",
        "pre_10"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "qbfJZGZoe_BB",
        "outputId": "24a05c69-1e4d-4f96-be71-6d311915d582"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "RMSE =  53.79604\n"
          ]
        }
      ],
      "source": [
        "# Calculate RMSE\n",
        "RMSE_10 = RMSE(pre_10, y_test)\n",
        "print(\"RMSE = \", RMSE_10)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Pnv-B0Iie_BB"
      },
      "source": [
        "### Q2. Summarize the results and findings"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uG8dyee9e_BC"
      },
      "source": [
        "Case                 |      y   | #of obs. in subtraining |            Model          | Regularization   | test RMSE\n",
        "---------------------|----------|-------------------------|---------------------------|------------------|----------\n",
        "1.OLS                  |    keep  |          10,000         |       Linear Regression   |        None      |   9.5507\n",
        "2.MLP_0_dm             |  de-mean |          10,000         |       no hidden layers    |        None      |   9.5510\n",
        "3.MLP_1_dm             |  de-mean |          10,000         |  one hidden layer + ReLU  |        None      |   9.2224\n",
        "4.MLP_2_dm             |  de-mean |          10,000         |  two hidden layers + ReLu |        None      |   9.2059\n",
        "5.MLP_2_dm_L2          |  de-mean |          10,000         |  two hidden layers + ReLu | Weight Decay(L2) | 10.8526\n",
        "6.MLP_2_dm_dropout     |  de-mean |          10,000         |  two hidden layers + ReLu |       Dropout    |   9.1662\n",
        "7.MLP_2_ykeep          |    keep  |          10,000         |  two hidden layers + ReLu |        None      |   15.0535\n",
        "8.MLP_2_ykeep_L2       |    keep  |          10,000         |  two hidden layers + ReLu | Weight Decay(L2) |   10.9160\n",
        "9.MLP_2_ykeep_dropout  |    keep  |          10,000         |  two hidden layers + ReLu |       Dropout    | 49.3151\n",
        "10.MLP_2_dm_dropout_full|  de-mean |           All           |  two hidden layers + ReLu |       Dropout    |  53.7960"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "D7CtgNRue_BC"
      },
      "source": [
        "\n",
        "From the above table, several conclusions can be made:\n",
        "\n",
        "1. Perform de-mean on y can effectively reduce the test RMSE.\n",
        "2. Case 2-4 showed that under other conditions being the same, the more hidden layers, the smaller the test RMSE, which means the model is more powerful.\n",
        "3. Case 5-6 showed that Dropout can effectively enhance the model's generalization ability to reduce test RMSE. However, the effect of L2 Weight Decay seems unclear, and it might even worsen the results.\n",
        "4. In case 7-9, it is found that L2 Weight Decay has a good effect compared to case 5, reducing RMSE from 15.0535 in case 7 to 10.9160. Therefore, it can be concluded that this method is more useful for data without de-meaning. Additionally, Dropout's effect is not good. When the learning rate is not small enough, Dropout can lead to gradient explosion, affecting convergence.\n",
        "5. In case 10, due to the trade-off between gradient explosion and slow convergence, the RMSE decreases slowly. Also, using the entire sub-training set increases the computation time for each epoch significantly. However, the final test RMSE does not show significant improvement. Therefore, it can be understood that when dealing with large and balanced datasets, using a subset of data for training is an efficient and performance-balanced approach.\n",
        "\n",
        "In addition, during the training process, I found when not perform de-meaning on y and maintain the settings of earlier cases, there would be NaN values in RMSE. I think this is likely due to gradient explosion. To avoid NaN, the learning rate needs to be reduced (by a considerable amount, as observed). However, the downside is that it significantly slows down the convergence speed, requiring more time for training.\n",
        "\n",
        "\n",
        "\n"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.3"
    },
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
